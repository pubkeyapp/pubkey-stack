// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`web-crud generator should create crud with modelOwnerId 1`] = `
{
  "company": {
    "children": {
      "data-access": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-data-access",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-data-access\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-data-access",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/data-access/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:data-access"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "export * from './lib/use-manager-find-many-company';",
                  "export * from './lib/use-manager-find-one-company';",
                ],
                "isBinary": false,
                "path": "libs/test/company/data-access/src/index.ts",
              },
              "lib": {
                "children": {
                  "use-manager-find-many-company.ts": {
                    "content": [
                      "import {",
                      "CompanyManagerCreateInput,",
                      "CompanyManagerFindManyInput,",
                      "} from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "import { useState } from 'react';",
                      "export function useManagerFindManyCompany(",
                      "props: Partial<CompanyManagerFindManyInput> = {}",
                      ") {",
                      "const sdk = useSdk();",
                      "const [limit, setLimit] = useState(props?.limit ?? 10);",
                      "const [page, setPage] = useState(props?.page ?? 1);",
                      "const [search, setSearch] = useState<string>(props?.search ?? '');",
                      "const input: CompanyManagerFindManyInput = { page, limit, search };",
                      "const query = useQuery({",
                      "queryKey: ['manager', 'find-many-company', input],",
                      "queryFn: () =>",
                      "sdk.managerFindManyCompany({ input }).then((res) => res.data),",
                      "});",
                      "const total = query.data?.paging?.meta?.totalCount ?? 0;",
                      "const items = query.data?.paging.data ?? [];",
                      "return {",
                      "items,",
                      "query,",
                      "pagination: {",
                      "page,",
                      "setPage,",
                      "limit,",
                      "setLimit,",
                      "total,",
                      "},",
                      "setSearch,",
                      "createCompany: (input: CompanyManagerCreateInput) =>",
                      "sdk",
                      ".managerCreateCompany({ input })",
                      ".then((res) => res.data)",
                      ".then((res) => {",
                      "if (res.created) {",
                      "toastSuccess(\`Company created\`);",
                      "} else {",
                      "toastError(\`Company not created\`);",
                      "}",
                      "return res.created;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return undefined;",
                      "}),",
                      "deleteCompany: (companyId: string) =>",
                      "sdk.managerDeleteCompany({ companyId }).then(() => {",
                      "toastSuccess('Company deleted');",
                      "return query.refetch();",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-manager-find-many-company.ts",
                  },
                  "use-manager-find-one-company.ts": {
                    "content": [
                      "import { CompanyManagerUpdateInput } from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "export function useManagerFindOneCompany({ companyId }: { companyId: string }) {",
                      "const sdk = useSdk();",
                      "const query = useQuery({",
                      "queryKey: ['manager', 'find-one-company', companyId],",
                      "queryFn: () =>",
                      "sdk.managerFindOneCompany({ companyId }).then((res) => res.data),",
                      "retry: 0,",
                      "});",
                      "const item = query.data?.item ?? undefined;",
                      "return {",
                      "item,",
                      "query,",
                      "updateCompany: async (input: CompanyManagerUpdateInput) =>",
                      "sdk",
                      ".managerUpdateCompany({ companyId, input })",
                      ".then((res) => res.data)",
                      ".then(async (res) => {",
                      "if (res) {",
                      "toastSuccess('Company updated');",
                      "await query.refetch();",
                      "return true;",
                      "}",
                      "toastError('Company not updated');",
                      "return false;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-manager-find-one-company.ts",
                  },
                },
                "path": "libs/test/company/data-access/src/lib",
              },
            },
            "path": "libs/test/company/data-access/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/data-access",
      },
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/feature/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:feature"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "import { lazy } from 'react';",
                  "export const ManagerCompanyFeature = lazy(",
                  "() => import('./lib/manager-company.routes')",
                  ");",
                ],
                "isBinary": false,
                "path": "libs/test/company/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "manager-company-create.feature.tsx": {
                    "content": [
                      "import { CompanyManagerCreateInput } from '@proj/sdk';",
                      "import { useManagerFindManyCompany } from '@proj/test-company-data-access';",
                      "import { ManagerCompanyUiCreateForm } from '@proj/test-company-ui';",
                      "import { toastError, UiBack, UiCard, UiPage } from '@pubkey-ui/core';",
                      "import { useNavigate } from 'react-router-dom';",
                      "export default function ManagerCompanyCreateFeature() {",
                      "const navigate = useNavigate();",
                      "const { createCompany } = useManagerFindManyCompany();",
                      "async function submit(input: CompanyManagerCreateInput) {",
                      "return createCompany(input)",
                      ".then((res) => {",
                      "if (res) {",
                      "navigate(\`../\${res?.id}\`);",
                      "}",
                      "})",
                      ".then(() => true)",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "});",
                      "}",
                      "return (",
                      "<UiPage leftAction={<UiBack />} title="Create Company">",
                      "<UiCard>",
                      "<ManagerCompanyUiCreateForm submit={submit} />",
                      "</UiCard>",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-create.feature.tsx",
                  },
                  "manager-company-detail-info.tab.tsx": {
                    "content": [
                      "import { useManagerFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiInfo } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function ManagerCompanyDetailInfoTab({",
                      "companyId,",
                      "}: {",
                      "companyId: string;",
                      "}) {",
                      "const { item, query } = useManagerFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<CompanyUiInfo company={item} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-detail-info.tab.tsx",
                  },
                  "manager-company-detail-settings.tab.tsx": {
                    "content": [
                      "import { useManagerFindOneCompany } from '@proj/test-company-data-access';",
                      "import { ManagerCompanyUiUpdateForm } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function ManagerCompanyDetailSettingsTab({",
                      "companyId,",
                      "}: {",
                      "companyId: string;",
                      "}) {",
                      "const { item, query, updateCompany } = useManagerFindOneCompany({",
                      "companyId,",
                      "});",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<ManagerCompanyUiUpdateForm company={item} submit={updateCompany} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-detail-settings.tab.tsx",
                  },
                  "manager-company-detail.feature.tsx": {
                    "content": [
                      "import { Group } from '@mantine/core';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiError,",
                      "UiLoader,",
                      "UiPage,",
                      "UiTabRoute,",
                      "UiTabRoutes,",
                      "} from '@pubkey-ui/core';",
                      "import { useManagerFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiItem } from '@proj/test-company-ui';",
                      "import { useParams } from 'react-router-dom';",
                      "import { ManagerCompanyDetailInfoTab } from './manager-company-detail-info.tab';",
                      "import { ManagerCompanyDetailSettingsTab } from './manager-company-detail-settings.tab';",
                      "export default function ManagerCompanyDetailFeature() {",
                      "const { companyId } = useParams<{ companyId: string }>() as {",
                      "companyId: string;",
                      "};",
                      "const { item, query } = useManagerFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "const tabs: UiTabRoute[] = [",
                      "{",
                      "path: 'info',",
                      "label: 'Info',",
                      "element: <ManagerCompanyDetailInfoTab companyId={companyId} />,",
                      "},",
                      "{",
                      "path: 'settings',",
                      "label: 'Settings',",
                      "element: <ManagerCompanyDetailSettingsTab companyId={companyId} />,",
                      "},",
                      "];",
                      "return (",
                      "<UiPage",
                      "title={<CompanyUiItem company={item} />}",
                      "leftAction={<UiBack />}",
                      "rightAction={",
                      "<Group>",
                      "<UiDebugModal data={item} />",
                      "</Group>",
                      "}",
                      ">",
                      "<UiTabRoutes tabs={tabs} />",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-detail.feature.tsx",
                  },
                  "manager-company-list.feature.tsx": {
                    "content": [
                      "import { Button, Group } from '@mantine/core';",
                      "import { UiPageLimit, UiSearchField } from '@proj/test-core-ui';",
                      "import { useManagerFindManyCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiGrid } from '@proj/test-company-ui';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiInfo,",
                      "UiLoader,",
                      "UiPage,",
                      "} from '@pubkey-ui/core';",
                      "import { Link } from 'react-router-dom';",
                      "export default function ManagerCompanyListFeature() {",
                      "const { items, pagination, query, setSearch } = useManagerFindManyCompany({",
                      "limit: 12,",
                      "});",
                      "return (",
                      "<UiPage",
                      "title="Companies"",
                      "leftAction={<UiBack />}",
                      "rightAction={",
                      "<Group>",
                      "<UiDebugModal data={items} />",
                      "<Button component={Link} to="create">",
                      "Create",
                      "</Button>",
                      "</Group>",
                      "}",
                      ">",
                      "<Group>",
                      "<UiSearchField placeholder="Search company" setSearch={setSearch} />",
                      "</Group>",
                      "{query.isLoading ? (",
                      "<UiLoader />",
                      ") : items?.length ? (",
                      "<CompanyUiGrid",
                      "companies={items}",
                      "page={pagination.page}",
                      "totalRecords={pagination.total}",
                      "onPageChange={pagination.setPage}",
                      "limit={pagination.limit}",
                      "setLimit={pagination.setLimit}",
                      "setPage={pagination.setPage}",
                      "/>",
                      ") : (",
                      "<UiInfo message="No companies found" />",
                      ")}",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-list.feature.tsx",
                  },
                  "manager-company.routes.tsx": {
                    "content": [
                      "import { lazy } from 'react';",
                      "import { useRoutes } from 'react-router-dom';",
                      "const Create = lazy(() => import('./manager-company-create.feature'));",
                      "const Detail = lazy(() => import('./manager-company-detail.feature'));",
                      "const List = lazy(() => import('./manager-company-list.feature'));",
                      "export default function ManagerCompanyRoutes() {",
                      "return useRoutes([",
                      "{ path: '', element: <List /> },",
                      "{ path: 'create', element: <Create /> },",
                      "{ path: ':companyId/*', element: <Detail /> },",
                      "]);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company.routes.tsx",
                  },
                },
                "path": "libs/test/company/feature/src/lib",
              },
            },
            "path": "libs/test/company/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/feature",
      },
      "ui": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-ui",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-ui\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-ui",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/ui/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:ui"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "export * from './lib/manager-company-ui-create-form';",
                  "export * from './lib/manager-company-ui-table';",
                  "export * from './lib/manager-company-ui-update-form';",
                  "export * from './lib/company-ui-avatar';",
                  "export * from './lib/company-ui-grid';",
                  "export * from './lib/company-ui-grid-item';",
                  "export * from './lib/company-ui-info';",
                  "export * from './lib/company-ui-item';",
                ],
                "isBinary": false,
                "path": "libs/test/company/ui/src/index.ts",
              },
              "lib": {
                "children": {
                  "company-ui-avatar.tsx": {
                    "content": [
                      "import { Company } from '@proj/sdk';",
                      "import { UiAvatar, UiAvatarProps } from '@pubkey-ui/core';",
                      "export type CompanyUiAvatarProps = UiAvatarProps & {",
                      "company?: Company;",
                      "};",
                      "export function CompanyUiAvatar({ company, ...props }: CompanyUiAvatarProps) {",
                      "return <UiAvatar url={undefined} name={company?.name} {...props} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-avatar.tsx",
                  },
                  "company-ui-grid-item.tsx": {
                    "content": [
                      "import { Paper } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { UiDebugModal, UiGroup } from '@pubkey-ui/core';",
                      "import { CompanyUiItem } from './company-ui-item';",
                      "export function CompanyUiGridItem({",
                      "company,",
                      "to,",
                      "}: {",
                      "company: Company;",
                      "to?: string;",
                      "}) {",
                      "return (",
                      "<Paper withBorder p="md">",
                      "<UiGroup>",
                      "<CompanyUiItem company={company} to={to} />",
                      "<UiDebugModal data={company} />",
                      "</UiGroup>",
                      "</Paper>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-grid-item.tsx",
                  },
                  "company-ui-grid.tsx": {
                    "content": [
                      "import { Group, Pagination, SimpleGrid } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { gridLimits, UiPageLimit } from '@proj/test-core-ui';",
                      "import { UiDebugModal, UiGroup, UiStack } from '@pubkey-ui/core';",
                      "import { DataTableProps } from 'mantine-datatable';",
                      "import { CompanyUiGridItem } from './company-ui-grid-item';",
                      "export function CompanyUiGrid({",
                      "companies = [],",
                      "onPageChange,",
                      "page,",
                      "totalRecords,",
                      "limit,",
                      "setLimit,",
                      "setPage,",
                      "}: {",
                      "companies: Company[];",
                      "page: DataTableProps['page'];",
                      "totalRecords: number;",
                      "onPageChange: (page: number) => void;",
                      "limit: number;",
                      "setLimit: (limit: number) => void;",
                      "setPage: (page: number) => void;",
                      "}) {",
                      "const totalPages = totalRecords / limit + 1;",
                      "return (",
                      "<UiStack>",
                      "<SimpleGrid cols={{ base: 1, sm: 2, md: 3 }} spacing="md">",
                      "{companies.map((company) => (",
                      "<CompanyUiGridItem",
                      "key={company.id}",
                      "to={company.id}",
                      "company={company}",
                      "/>",
                      "))}",
                      "</SimpleGrid>",
                      "<UiGroup>",
                      "<Pagination",
                      "disabled={totalPages < 2}",
                      "total={totalPages}",
                      "value={page}",
                      "onChange={onPageChange}",
                      "/>",
                      "<Group>",
                      "<UiDebugModal data={companies} />",
                      "<UiPageLimit",
                      "data={gridLimits}",
                      "limit={limit}",
                      "setLimit={setLimit}",
                      "setPage={setPage}",
                      "/>",
                      "</Group>",
                      "</UiGroup>",
                      "</UiStack>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-grid.tsx",
                  },
                  "company-ui-info.tsx": {
                    "content": [
                      "import { Company } from '@proj/sdk';",
                      "import { UiInfoItems, UiInfoTable, UiTime } from '@pubkey-ui/core';",
                      "export function CompanyUiInfo({ company }: { company?: Company }) {",
                      "if (!company) return null;",
                      "const items: UiInfoItems = [",
                      "['name', company.name],",
                      "[",
                      "'Created At',",
                      "<UiTime size="xs" c="dimmed" date={new Date(company.createdAt ?? '0')} />,",
                      "],",
                      "[",
                      "'Updated At',",
                      "<UiTime size="xs" c="dimmed" date={new Date(company.updatedAt ?? '0')} />,",
                      "],",
                      "];",
                      "return <UiInfoTable items={items} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-info.tsx",
                  },
                  "company-ui-item.tsx": {
                    "content": [
                      "import { AvatarProps, Group, GroupProps, Stack, Text } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { UiAnchor, UiAnchorProps } from '@pubkey-ui/core';",
                      "import { CompanyUiAvatar } from './company-ui-avatar';",
                      "export function CompanyUiItem({",
                      "anchorProps,",
                      "avatarProps,",
                      "groupProps,",
                      "company,",
                      "to,",
                      "}: {",
                      "anchorProps?: UiAnchorProps;",
                      "avatarProps?: Omit<AvatarProps, 'src'>;",
                      "groupProps?: GroupProps;",
                      "company?: Company;",
                      "to?: string | null;",
                      "}) {",
                      "if (!company) return null;",
                      "return (",
                      "<UiAnchor to={to ?? undefined} underline="never" {...anchorProps}>",
                      "<Group gap="sm" {...groupProps}>",
                      "<CompanyUiAvatar company={company} {...avatarProps} />",
                      "<Stack gap={1}>",
                      "<Text size="lg" fw={500}>",
                      "{company?.name}",
                      "</Text>",
                      "</Stack>",
                      "</Group>",
                      "</UiAnchor>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-item.tsx",
                  },
                  "manager-company-ui-create-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyManagerCreateInput } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function ManagerCompanyUiCreateForm({",
                      "submit,",
                      "}: {",
                      "submit: (res: CompanyManagerCreateInput) => Promise<boolean>;",
                      "}) {",
                      "const form = useForm<CompanyManagerCreateInput>({",
                      "initialValues: {",
                      "name: '',",
                      "location: '',",
                      "phone: '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput",
                      "required",
                      "name="name"",
                      "label="name"",
                      "{...form.getInputProps('name')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/manager-company-ui-create-form.tsx",
                  },
                  "manager-company-ui-table.tsx": {
                    "content": [
                      "import { ActionIcon, Anchor, Group, ScrollArea } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { IconPencil, IconTrash } from '@tabler/icons-react';",
                      "import { DataTable, DataTableProps } from 'mantine-datatable';",
                      "import { Link } from 'react-router-dom';",
                      "export function ManagerCompanyUiTable({",
                      "deleteCompany,",
                      "companies = [],",
                      "onPageChange,",
                      "page,",
                      "recordsPerPage,",
                      "totalRecords,",
                      "}: {",
                      "deleteCompany: (company: Company) => void;",
                      "companies: Company[];",
                      "page: DataTableProps['page'];",
                      "totalRecords: DataTableProps['totalRecords'];",
                      "recordsPerPage: DataTableProps['recordsPerPage'];",
                      "onPageChange: (page: number) => void;",
                      "}) {",
                      "return (",
                      "<ScrollArea>",
                      "<DataTable",
                      "borderRadius="sm"",
                      "withTableBorder",
                      "shadow="xs"",
                      "onPageChange={onPageChange}",
                      "page={page ?? 1}",
                      "recordsPerPage={recordsPerPage ?? 10}",
                      "totalRecords={totalRecords ?? 1}",
                      "columns={[",
                      "{",
                      "accessor: 'name',",
                      "render: (item) => (",
                      "<Anchor component={Link} to={\`./\${item.id}\`} size="sm" fw={500}>",
                      "{item.name}",
                      "</Anchor>",
                      "),",
                      "},",
                      "{",
                      "accessor: 'actions',",
                      "title: 'Actions',",
                      "textAlign: 'right',",
                      "render: (item) => (",
                      "<Group gap="xs" justify="right">",
                      "<ActionIcon",
                      "color="brand"",
                      "variant="light"",
                      "size="sm"",
                      "component={Link}",
                      "to={\`./\${item.id}/settings\`}",
                      ">",
                      "<IconPencil size={16} />",
                      "</ActionIcon>",
                      "<ActionIcon",
                      "color="red"",
                      "variant="light"",
                      "size="sm"",
                      "onClick={() => deleteCompany(item)}",
                      ">",
                      "<IconTrash size={16} />",
                      "</ActionIcon>",
                      "</Group>",
                      "),",
                      "},",
                      "]}",
                      "records={companies}",
                      "/>",
                      "</ScrollArea>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/manager-company-ui-table.tsx",
                  },
                  "manager-company-ui-update-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyManagerUpdateInput, Company } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function ManagerCompanyUiUpdateForm({",
                      "submit,",
                      "company,",
                      "}: {",
                      "submit: (res: CompanyManagerUpdateInput) => Promise<boolean>;",
                      "company: Company;",
                      "}) {",
                      "const form = useForm<CompanyManagerUpdateInput>({",
                      "initialValues: {",
                      "name: company.name ?? '',",
                      "location: company.location ?? '',",
                      "phone: company.phone ?? '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput name="name" label="name" {...form.getInputProps('name')} />",
                      "<TextInput",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/manager-company-ui-update-form.tsx",
                  },
                },
                "path": "libs/test/company/ui/src/lib",
              },
            },
            "path": "libs/test/company/ui/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/ui",
      },
    },
    "path": "libs/test/company",
  },
  "core": {
    "children": {
      "data-access": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-core-data-access",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-core-data-access\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-core-data-access",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/core/data-access/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/core/data-access/src/index.ts",
              },
            },
            "path": "libs/test/core/data-access/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/tsconfig.lib.json",
          },
        },
        "path": "libs/test/core/data-access",
      },
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-core-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-core-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-core-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/core/feature/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/core/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "test-core-feature.tsx": {
                    "content": [
                      "/* eslint-disable-next-line */",
                      "export interface TestCoreFeatureProps {}",
                      "export function TestCoreFeature(props: TestCoreFeatureProps) {",
                      "return (",
                      "<div>",
                      "<h1>Welcome to TestCoreFeature!</h1>",
                      "</div>",
                      ");",
                      "}",
                      "export default TestCoreFeature;",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-feature.tsx",
                  },
                  "test-core-routes-admin.tsx": {
                    "content": [
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "const links = [];",
                      "const routes = [];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-admin.tsx",
                  },
                  "test-core-routes-manager.tsx": {
                    "content": [
                      "import { IconBuilding } from '@tabler/icons-react';",
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "import { ManagerCompanyFeature } from '@proj/test-company-feature';",
                      "const links = [{ label: 'Companies', icon: IconBuilding, to: '/companies' }];",
                      "const routes = [{ path: '/companies/*', element: <ManagerCompanyFeature /> }];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-manager.tsx",
                  },
                  "test-core-routes-user.tsx": {
                    "content": [
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "const links = [];",
                      "const routes = [];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-user.tsx",
                  },
                  "test-core-routes.tsx": {
                    "content": [
                      "/* eslint-disable-next-line */",
                      "export interface TestCoreRoutesProps {}",
                      "export function TestCoreRoutes(props: TestCoreRoutesProps) {",
                      "return (",
                      "<div>",
                      "<h1>Welcome to TestCoreRoutes!</h1>",
                      "</div>",
                      ");",
                      "}",
                      "export default TestCoreRoutes;",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes.tsx",
                  },
                },
                "path": "libs/test/core/feature/src/lib",
              },
            },
            "path": "libs/test/core/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/core/feature",
      },
    },
    "path": "libs/test/core",
  },
  "user": {
    "children": {
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-user-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-user-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-user-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/user/feature/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/user/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "admin-user-detail-feature.tsx": {
                    "content": [
                      "export function AdminUserDetailFeature() {",
                      "const { userId } = useParams<{ userId: string }>() as { userId: string };",
                      "const tabs = [",
                      "{",
                      "path: 'settings',",
                      "label: 'Settings',",
                      "element: <AdminUserDetailFeatureSettings userId={userId} />,",
                      "},",
                      "{",
                      "path: 'identities',",
                      "label: 'Identities',",
                      "element: <AdminUserDetailFeatureIdentities userId={userId} />,",
                      "},",
                      "];",
                      "return <UiTabRoutes tabs={tabs} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/user/feature/src/lib/admin-user-detail-feature.tsx",
                  },
                },
                "path": "libs/test/user/feature/src/lib",
              },
            },
            "path": "libs/test/user/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/user/feature",
      },
    },
    "path": "libs/test/user",
  },
}
`;

exports[`web-crud generator should create crud with modelOwnerId for admin and user 1`] = `
{
  "company": {
    "children": {
      "data-access": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-data-access",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-data-access\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-data-access",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/data-access/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:data-access"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "export * from './lib/use-user-find-many-company';",
                  "export * from './lib/use-user-find-one-company';",
                  "export * from './lib/use-admin-find-many-company';",
                  "export * from './lib/use-admin-find-one-company';",
                ],
                "isBinary": false,
                "path": "libs/test/company/data-access/src/index.ts",
              },
              "lib": {
                "children": {
                  "use-admin-find-many-company.ts": {
                    "content": [
                      "import { CompanyAdminCreateInput, CompanyAdminFindManyInput } from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "import { useState } from 'react';",
                      "export function useAdminFindManyCompany(",
                      "props: Partial<CompanyAdminFindManyInput> & { ownerId: string }",
                      ") {",
                      "const sdk = useSdk();",
                      "const [limit, setLimit] = useState(props?.limit ?? 10);",
                      "const [page, setPage] = useState(props?.page ?? 1);",
                      "const [search, setSearch] = useState<string>(props?.search ?? '');",
                      "const input: CompanyAdminFindManyInput = {",
                      "page,",
                      "limit,",
                      "search,",
                      "ownerId: props.ownerId,",
                      "};",
                      "const query = useQuery({",
                      "queryKey: ['admin', 'find-many-company', input],",
                      "queryFn: () => sdk.adminFindManyCompany({ input }).then((res) => res.data),",
                      "});",
                      "const total = query.data?.paging?.meta?.totalCount ?? 0;",
                      "const items = query.data?.paging.data ?? [];",
                      "return {",
                      "items,",
                      "query,",
                      "pagination: {",
                      "page,",
                      "setPage,",
                      "limit,",
                      "setLimit,",
                      "total,",
                      "},",
                      "setSearch,",
                      "createCompany: (input: CompanyAdminCreateInput) =>",
                      "sdk",
                      ".adminCreateCompany({ input: { ...input, ownerId: props.ownerId } })",
                      ".then((res) => res.data)",
                      ".then((res) => {",
                      "if (res.created) {",
                      "toastSuccess(\`Company created\`);",
                      "} else {",
                      "toastError(\`Company not created\`);",
                      "}",
                      "return res.created;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return undefined;",
                      "}),",
                      "deleteCompany: (companyId: string) =>",
                      "sdk.adminDeleteCompany({ companyId }).then(() => {",
                      "toastSuccess('Company deleted');",
                      "return query.refetch();",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-admin-find-many-company.ts",
                  },
                  "use-admin-find-one-company.ts": {
                    "content": [
                      "import { CompanyAdminUpdateInput } from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "export function useAdminFindOneCompany({ companyId }: { companyId: string }) {",
                      "const sdk = useSdk();",
                      "const query = useQuery({",
                      "queryKey: ['admin', 'find-one-company', companyId],",
                      "queryFn: () =>",
                      "sdk.adminFindOneCompany({ companyId }).then((res) => res.data),",
                      "retry: 0,",
                      "});",
                      "const item = query.data?.item ?? undefined;",
                      "return {",
                      "item,",
                      "query,",
                      "updateCompany: async (input: CompanyAdminUpdateInput) =>",
                      "sdk",
                      ".adminUpdateCompany({ companyId, input })",
                      ".then((res) => res.data)",
                      ".then(async (res) => {",
                      "if (res) {",
                      "toastSuccess('Company updated');",
                      "await query.refetch();",
                      "return true;",
                      "}",
                      "toastError('Company not updated');",
                      "return false;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-admin-find-one-company.ts",
                  },
                  "use-user-find-many-company.ts": {
                    "content": [
                      "import { CompanyUserCreateInput, CompanyUserFindManyInput } from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "import { useState } from 'react';",
                      "export function useUserFindManyCompany(",
                      "props: Partial<CompanyUserFindManyInput> = {}",
                      ") {",
                      "const sdk = useSdk();",
                      "const [limit, setLimit] = useState(props?.limit ?? 10);",
                      "const [page, setPage] = useState(props?.page ?? 1);",
                      "const [search, setSearch] = useState<string>(props?.search ?? '');",
                      "const input: CompanyUserFindManyInput = { page, limit, search };",
                      "const query = useQuery({",
                      "queryKey: ['user', 'find-many-company', input],",
                      "queryFn: () => sdk.userFindManyCompany({ input }).then((res) => res.data),",
                      "});",
                      "const total = query.data?.paging?.meta?.totalCount ?? 0;",
                      "const items = query.data?.paging.data ?? [];",
                      "return {",
                      "items,",
                      "query,",
                      "pagination: {",
                      "page,",
                      "setPage,",
                      "limit,",
                      "setLimit,",
                      "total,",
                      "},",
                      "setSearch,",
                      "createCompany: (input: CompanyUserCreateInput) =>",
                      "sdk",
                      ".userCreateCompany({ input })",
                      ".then((res) => res.data)",
                      ".then((res) => {",
                      "if (res.created) {",
                      "toastSuccess(\`Company created\`);",
                      "} else {",
                      "toastError(\`Company not created\`);",
                      "}",
                      "return res.created;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return undefined;",
                      "}),",
                      "deleteCompany: (companyId: string) =>",
                      "sdk.userDeleteCompany({ companyId }).then(() => {",
                      "toastSuccess('Company deleted');",
                      "return query.refetch();",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-user-find-many-company.ts",
                  },
                  "use-user-find-one-company.ts": {
                    "content": [
                      "import { CompanyUserUpdateInput } from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "export function useUserFindOneCompany({ companyId }: { companyId: string }) {",
                      "const sdk = useSdk();",
                      "const query = useQuery({",
                      "queryKey: ['user', 'find-one-company', companyId],",
                      "queryFn: () =>",
                      "sdk.userFindOneCompany({ companyId }).then((res) => res.data),",
                      "retry: 0,",
                      "});",
                      "const item = query.data?.item ?? undefined;",
                      "return {",
                      "item,",
                      "query,",
                      "updateCompany: async (input: CompanyUserUpdateInput) =>",
                      "sdk",
                      ".userUpdateCompany({ companyId, input })",
                      ".then((res) => res.data)",
                      ".then(async (res) => {",
                      "if (res) {",
                      "toastSuccess('Company updated');",
                      "await query.refetch();",
                      "return true;",
                      "}",
                      "toastError('Company not updated');",
                      "return false;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-user-find-one-company.ts",
                  },
                },
                "path": "libs/test/company/data-access/src/lib",
              },
            },
            "path": "libs/test/company/data-access/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/data-access",
      },
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/feature/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:feature"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "import { lazy } from 'react';",
                  "export const UserCompanyFeature = lazy(",
                  "() => import('./lib/user-company.routes')",
                  ");",
                  "export const AdminCompanyFeature = lazy(",
                  "() => import('./lib/admin-company.routes')",
                  ");",
                ],
                "isBinary": false,
                "path": "libs/test/company/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "admin-company-create.feature.tsx": {
                    "content": [
                      "import { CompanyAdminCreateInput } from '@proj/sdk';",
                      "import { useAdminFindManyCompany } from '@proj/test-company-data-access';",
                      "import { AdminCompanyUiCreateForm } from '@proj/test-company-ui';",
                      "import { toastError, UiBack, UiCard } from '@pubkey-ui/core';",
                      "import { useNavigate } from 'react-router-dom';",
                      "import { Group, Text } from '@mantine/core';",
                      "export default function AdminCompanyCreateFeature({",
                      "ownerId,",
                      "}: {",
                      "ownerId: string;",
                      "}) {",
                      "const navigate = useNavigate();",
                      "const { createCompany } = useAdminFindManyCompany({ ownerId });",
                      "async function submit(input: CompanyAdminCreateInput) {",
                      "return createCompany(input)",
                      ".then((res) => {",
                      "if (res) {",
                      "navigate(\`../\${res?.id}\`);",
                      "}",
                      "})",
                      ".then(() => true)",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "});",
                      "}",
                      "return (",
                      "<UiCard",
                      "title={",
                      "<Group>",
                      "<UiBack />",
                      "<Text size="lg" fw={500}>",
                      "Create Company",
                      "</Text>",
                      "</Group>",
                      "}",
                      ">",
                      "<AdminCompanyUiCreateForm submit={submit} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/admin-company-create.feature.tsx",
                  },
                  "admin-company-detail-info.tab.tsx": {
                    "content": [
                      "import { useAdminFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiInfo } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function AdminCompanyDetailInfoTab({",
                      "companyId,",
                      "}: {",
                      "companyId: string;",
                      "}) {",
                      "const { item, query } = useAdminFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<CompanyUiInfo company={item} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/admin-company-detail-info.tab.tsx",
                  },
                  "admin-company-detail-settings.tab.tsx": {
                    "content": [
                      "import { useAdminFindOneCompany } from '@proj/test-company-data-access';",
                      "import { AdminCompanyUiUpdateForm } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function AdminCompanyDetailSettingsTab({",
                      "companyId,",
                      "}: {",
                      "companyId: string;",
                      "}) {",
                      "const { item, query, updateCompany } = useAdminFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<AdminCompanyUiUpdateForm company={item} submit={updateCompany} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/admin-company-detail-settings.tab.tsx",
                  },
                  "admin-company-detail.feature.tsx": {
                    "content": [
                      "import { Group } from '@mantine/core';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiError,",
                      "UiLoader,",
                      "UiStack,",
                      "UiTabRoute,",
                      "UiTabRoutes,",
                      "} from '@pubkey-ui/core';",
                      "import { useAdminFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiItem } from '@proj/test-company-ui';",
                      "import { useParams } from 'react-router-dom';",
                      "import { AdminCompanyDetailInfoTab } from './admin-company-detail-info.tab';",
                      "import { AdminCompanyDetailSettingsTab } from './admin-company-detail-settings.tab';",
                      "export default function AdminCompanyDetailFeature() {",
                      "const { companyId } = useParams<{ companyId: string }>() as {",
                      "companyId: string;",
                      "};",
                      "const { item, query } = useAdminFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "const tabs: UiTabRoute[] = [",
                      "{",
                      "path: 'info',",
                      "label: 'Info',",
                      "element: <AdminCompanyDetailInfoTab companyId={companyId} />,",
                      "},",
                      "{",
                      "path: 'settings',",
                      "label: 'Settings',",
                      "element: <AdminCompanyDetailSettingsTab companyId={companyId} />,",
                      "},",
                      "];",
                      "return (",
                      "<UiStack>",
                      "<Group>",
                      "<UiBack />",
                      "<CompanyUiItem company={item} />",
                      "<UiDebugModal data={item} />",
                      "</Group>",
                      "<UiTabRoutes tabs={tabs} />",
                      "</UiStack>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/admin-company-detail.feature.tsx",
                  },
                  "admin-company-list.feature.tsx": {
                    "content": [
                      "import { Button, Group } from '@mantine/core';",
                      "import { UiPageLimit, UiSearchField } from '@proj/test-core-ui';",
                      "import { useAdminFindManyCompany } from '@proj/test-company-data-access';",
                      "import { AdminCompanyUiTable } from '@proj/test-company-ui';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiInfo,",
                      "UiLoader,",
                      "UiStack,",
                      "} from '@pubkey-ui/core';",
                      "import { Link } from 'react-router-dom';",
                      "export default function AdminCompanyListFeature({",
                      "ownerId,",
                      "}: {",
                      "ownerId: string;",
                      "}) {",
                      "const { deleteCompany, items, pagination, query, setSearch } =",
                      "useAdminFindManyCompany({",
                      "limit: 10,",
                      "ownerId,",
                      "});",
                      "return (",
                      "<UiStack>",
                      "<Group>",
                      "<UiSearchField placeholder="Search company" setSearch={setSearch} />",
                      "<UiPageLimit",
                      "limit={pagination.limit}",
                      "setLimit={pagination.setLimit}",
                      "setPage={pagination.setPage}",
                      "/>",
                      "<UiDebugModal data={items} />",
                      "<Button component={Link} to="create">",
                      "Create",
                      "</Button>",
                      "</Group>",
                      "{query.isLoading ? (",
                      "<UiLoader />",
                      ") : items?.length ? (",
                      "<AdminCompanyUiTable",
                      "deleteCompany={(company) => {",
                      "if (!window.confirm('Are you sure?')) return;",
                      "return deleteCompany(company.id);",
                      "}}",
                      "companies={items}",
                      "page={pagination.page}",
                      "totalRecords={pagination.total}",
                      "recordsPerPage={pagination.limit}",
                      "onPageChange={(page) => void pagination.setPage(page)}",
                      "/>",
                      ") : (",
                      "<UiInfo message="No companies found" />",
                      ")}",
                      "</UiStack>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/admin-company-list.feature.tsx",
                  },
                  "admin-company.routes.tsx": {
                    "content": [
                      "import { lazy } from 'react';",
                      "import { useRoutes } from 'react-router-dom';",
                      "const Create = lazy(() => import('./admin-company-create.feature'));",
                      "const Detail = lazy(() => import('./admin-company-detail.feature'));",
                      "const List = lazy(() => import('./admin-company-list.feature'));",
                      "export default function AdminCompanyRoutes({ ownerId }: { ownerId: string }) {",
                      "return useRoutes([",
                      "{ path: '', element: <List ownerId={ownerId} /> },",
                      "{ path: 'create', element: <Create ownerId={ownerId} /> },",
                      "{ path: ':companyId/*', element: <Detail /> },",
                      "]);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/admin-company.routes.tsx",
                  },
                  "user-company-create.feature.tsx": {
                    "content": [
                      "import { CompanyUserCreateInput } from '@proj/sdk';",
                      "import { useUserFindManyCompany } from '@proj/test-company-data-access';",
                      "import { UserCompanyUiCreateForm } from '@proj/test-company-ui';",
                      "import { toastError, UiBack, UiCard, UiPage } from '@pubkey-ui/core';",
                      "import { useNavigate } from 'react-router-dom';",
                      "export default function UserCompanyCreateFeature() {",
                      "const navigate = useNavigate();",
                      "const { createCompany } = useUserFindManyCompany();",
                      "async function submit(input: CompanyUserCreateInput) {",
                      "return createCompany(input)",
                      ".then((res) => {",
                      "if (res) {",
                      "navigate(\`../\${res?.id}\`);",
                      "}",
                      "})",
                      ".then(() => true)",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "});",
                      "}",
                      "return (",
                      "<UiPage leftAction={<UiBack />} title="Create Company">",
                      "<UiCard>",
                      "<UserCompanyUiCreateForm submit={submit} />",
                      "</UiCard>",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/user-company-create.feature.tsx",
                  },
                  "user-company-detail-info.tab.tsx": {
                    "content": [
                      "import { useUserFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiInfo } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function UserCompanyDetailInfoTab({ companyId }: { companyId: string }) {",
                      "const { item, query } = useUserFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<CompanyUiInfo company={item} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/user-company-detail-info.tab.tsx",
                  },
                  "user-company-detail-settings.tab.tsx": {
                    "content": [
                      "import { useUserFindOneCompany } from '@proj/test-company-data-access';",
                      "import { UserCompanyUiUpdateForm } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function UserCompanyDetailSettingsTab({",
                      "companyId,",
                      "}: {",
                      "companyId: string;",
                      "}) {",
                      "const { item, query, updateCompany } = useUserFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<UserCompanyUiUpdateForm company={item} submit={updateCompany} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/user-company-detail-settings.tab.tsx",
                  },
                  "user-company-detail.feature.tsx": {
                    "content": [
                      "import { Group } from '@mantine/core';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiError,",
                      "UiLoader,",
                      "UiPage,",
                      "UiTabRoute,",
                      "UiTabRoutes,",
                      "} from '@pubkey-ui/core';",
                      "import { useUserFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiItem } from '@proj/test-company-ui';",
                      "import { useParams } from 'react-router-dom';",
                      "import { UserCompanyDetailInfoTab } from './user-company-detail-info.tab';",
                      "import { UserCompanyDetailSettingsTab } from './user-company-detail-settings.tab';",
                      "export default function UserCompanyDetailFeature() {",
                      "const { companyId } = useParams<{ companyId: string }>() as {",
                      "companyId: string;",
                      "};",
                      "const { item, query } = useUserFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "const tabs: UiTabRoute[] = [",
                      "{",
                      "path: 'info',",
                      "label: 'Info',",
                      "element: <UserCompanyDetailInfoTab companyId={companyId} />,",
                      "},",
                      "{",
                      "path: 'settings',",
                      "label: 'Settings',",
                      "element: <UserCompanyDetailSettingsTab companyId={companyId} />,",
                      "},",
                      "];",
                      "return (",
                      "<UiPage",
                      "title={<CompanyUiItem company={item} />}",
                      "leftAction={<UiBack />}",
                      "rightAction={",
                      "<Group>",
                      "<UiDebugModal data={item} />",
                      "</Group>",
                      "}",
                      ">",
                      "<UiTabRoutes tabs={tabs} />",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/user-company-detail.feature.tsx",
                  },
                  "user-company-list.feature.tsx": {
                    "content": [
                      "import { Button, Group } from '@mantine/core';",
                      "import { UiPageLimit, UiSearchField } from '@proj/test-core-ui';",
                      "import { useUserFindManyCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiGrid } from '@proj/test-company-ui';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiInfo,",
                      "UiLoader,",
                      "UiPage,",
                      "} from '@pubkey-ui/core';",
                      "import { Link } from 'react-router-dom';",
                      "export default function UserCompanyListFeature() {",
                      "const { items, pagination, query, setSearch } = useUserFindManyCompany({",
                      "limit: 12,",
                      "});",
                      "return (",
                      "<UiPage",
                      "title="Companies"",
                      "leftAction={<UiBack />}",
                      "rightAction={",
                      "<Group>",
                      "<UiDebugModal data={items} />",
                      "<Button component={Link} to="create">",
                      "Create",
                      "</Button>",
                      "</Group>",
                      "}",
                      ">",
                      "<Group>",
                      "<UiSearchField placeholder="Search company" setSearch={setSearch} />",
                      "</Group>",
                      "{query.isLoading ? (",
                      "<UiLoader />",
                      ") : items?.length ? (",
                      "<CompanyUiGrid",
                      "companies={items}",
                      "page={pagination.page}",
                      "totalRecords={pagination.total}",
                      "onPageChange={pagination.setPage}",
                      "limit={pagination.limit}",
                      "setLimit={pagination.setLimit}",
                      "setPage={pagination.setPage}",
                      "/>",
                      ") : (",
                      "<UiInfo message="No companies found" />",
                      ")}",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/user-company-list.feature.tsx",
                  },
                  "user-company.routes.tsx": {
                    "content": [
                      "import { lazy } from 'react';",
                      "import { useRoutes } from 'react-router-dom';",
                      "const Create = lazy(() => import('./user-company-create.feature'));",
                      "const Detail = lazy(() => import('./user-company-detail.feature'));",
                      "const List = lazy(() => import('./user-company-list.feature'));",
                      "export default function UserCompanyRoutes() {",
                      "return useRoutes([",
                      "{ path: '', element: <List /> },",
                      "{ path: 'create', element: <Create /> },",
                      "{ path: ':companyId/*', element: <Detail /> },",
                      "]);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/user-company.routes.tsx",
                  },
                },
                "path": "libs/test/company/feature/src/lib",
              },
            },
            "path": "libs/test/company/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/feature",
      },
      "ui": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-ui",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-ui\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-ui",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/ui/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:ui"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "export * from './lib/user-company-ui-create-form';",
                  "export * from './lib/user-company-ui-table';",
                  "export * from './lib/user-company-ui-update-form';",
                  "export * from './lib/company-ui-avatar';",
                  "export * from './lib/company-ui-grid';",
                  "export * from './lib/company-ui-grid-item';",
                  "export * from './lib/company-ui-info';",
                  "export * from './lib/company-ui-item';",
                  "export * from './lib/admin-company-ui-create-form';",
                  "export * from './lib/admin-company-ui-table';",
                  "export * from './lib/admin-company-ui-update-form';",
                ],
                "isBinary": false,
                "path": "libs/test/company/ui/src/index.ts",
              },
              "lib": {
                "children": {
                  "admin-company-ui-create-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyAdminCreateInput } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function AdminCompanyUiCreateForm({",
                      "submit,",
                      "}: {",
                      "submit: (res: CompanyAdminCreateInput) => Promise<boolean>;",
                      "}) {",
                      "const form = useForm<CompanyAdminCreateInput>({",
                      "initialValues: {",
                      "name: '',",
                      "location: '',",
                      "phone: '',",
                      "ownerId: '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput",
                      "required",
                      "name="name"",
                      "label="name"",
                      "{...form.getInputProps('name')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/admin-company-ui-create-form.tsx",
                  },
                  "admin-company-ui-table.tsx": {
                    "content": [
                      "import { ActionIcon, Anchor, Group, ScrollArea } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { IconPencil, IconTrash } from '@tabler/icons-react';",
                      "import { DataTable, DataTableProps } from 'mantine-datatable';",
                      "import { Link } from 'react-router-dom';",
                      "export function AdminCompanyUiTable({",
                      "deleteCompany,",
                      "companies = [],",
                      "onPageChange,",
                      "page,",
                      "recordsPerPage,",
                      "totalRecords,",
                      "}: {",
                      "deleteCompany: (company: Company) => void;",
                      "companies: Company[];",
                      "page: DataTableProps['page'];",
                      "totalRecords: DataTableProps['totalRecords'];",
                      "recordsPerPage: DataTableProps['recordsPerPage'];",
                      "onPageChange: (page: number) => void;",
                      "}) {",
                      "return (",
                      "<ScrollArea>",
                      "<DataTable",
                      "borderRadius="sm"",
                      "withTableBorder",
                      "shadow="xs"",
                      "onPageChange={onPageChange}",
                      "page={page ?? 1}",
                      "recordsPerPage={recordsPerPage ?? 10}",
                      "totalRecords={totalRecords ?? 1}",
                      "columns={[",
                      "{",
                      "accessor: 'name',",
                      "render: (item) => (",
                      "<Anchor component={Link} to={\`./\${item.id}\`} size="sm" fw={500}>",
                      "{item.name}",
                      "</Anchor>",
                      "),",
                      "},",
                      "{",
                      "accessor: 'actions',",
                      "title: 'Actions',",
                      "textAlign: 'right',",
                      "render: (item) => (",
                      "<Group gap="xs" justify="right">",
                      "<ActionIcon",
                      "color="brand"",
                      "variant="light"",
                      "size="sm"",
                      "component={Link}",
                      "to={\`./\${item.id}/settings\`}",
                      ">",
                      "<IconPencil size={16} />",
                      "</ActionIcon>",
                      "<ActionIcon",
                      "color="red"",
                      "variant="light"",
                      "size="sm"",
                      "onClick={() => deleteCompany(item)}",
                      ">",
                      "<IconTrash size={16} />",
                      "</ActionIcon>",
                      "</Group>",
                      "),",
                      "},",
                      "]}",
                      "records={companies}",
                      "/>",
                      "</ScrollArea>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/admin-company-ui-table.tsx",
                  },
                  "admin-company-ui-update-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyAdminUpdateInput, Company } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function AdminCompanyUiUpdateForm({",
                      "submit,",
                      "company,",
                      "}: {",
                      "submit: (res: CompanyAdminUpdateInput) => Promise<boolean>;",
                      "company: Company;",
                      "}) {",
                      "const form = useForm<CompanyAdminUpdateInput>({",
                      "initialValues: {",
                      "name: company.name ?? '',",
                      "location: company.location ?? '',",
                      "phone: company.phone ?? '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput name="name" label="name" {...form.getInputProps('name')} />",
                      "<TextInput",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/admin-company-ui-update-form.tsx",
                  },
                  "company-ui-avatar.tsx": {
                    "content": [
                      "import { Company } from '@proj/sdk';",
                      "import { UiAvatar, UiAvatarProps } from '@pubkey-ui/core';",
                      "export type CompanyUiAvatarProps = UiAvatarProps & {",
                      "company?: Company;",
                      "};",
                      "export function CompanyUiAvatar({ company, ...props }: CompanyUiAvatarProps) {",
                      "return <UiAvatar url={undefined} name={company?.name} {...props} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-avatar.tsx",
                  },
                  "company-ui-grid-item.tsx": {
                    "content": [
                      "import { Paper } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { UiDebugModal, UiGroup } from '@pubkey-ui/core';",
                      "import { CompanyUiItem } from './company-ui-item';",
                      "export function CompanyUiGridItem({",
                      "company,",
                      "to,",
                      "}: {",
                      "company: Company;",
                      "to?: string;",
                      "}) {",
                      "return (",
                      "<Paper withBorder p="md">",
                      "<UiGroup>",
                      "<CompanyUiItem company={company} to={to} />",
                      "<UiDebugModal data={company} />",
                      "</UiGroup>",
                      "</Paper>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-grid-item.tsx",
                  },
                  "company-ui-grid.tsx": {
                    "content": [
                      "import { Group, Pagination, SimpleGrid } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { gridLimits, UiPageLimit } from '@proj/test-core-ui';",
                      "import { UiDebugModal, UiGroup, UiStack } from '@pubkey-ui/core';",
                      "import { DataTableProps } from 'mantine-datatable';",
                      "import { CompanyUiGridItem } from './company-ui-grid-item';",
                      "export function CompanyUiGrid({",
                      "companies = [],",
                      "onPageChange,",
                      "page,",
                      "totalRecords,",
                      "limit,",
                      "setLimit,",
                      "setPage,",
                      "}: {",
                      "companies: Company[];",
                      "page: DataTableProps['page'];",
                      "totalRecords: number;",
                      "onPageChange: (page: number) => void;",
                      "limit: number;",
                      "setLimit: (limit: number) => void;",
                      "setPage: (page: number) => void;",
                      "}) {",
                      "const totalPages = totalRecords / limit + 1;",
                      "return (",
                      "<UiStack>",
                      "<SimpleGrid cols={{ base: 1, sm: 2, md: 3 }} spacing="md">",
                      "{companies.map((company) => (",
                      "<CompanyUiGridItem",
                      "key={company.id}",
                      "to={company.id}",
                      "company={company}",
                      "/>",
                      "))}",
                      "</SimpleGrid>",
                      "<UiGroup>",
                      "<Pagination",
                      "disabled={totalPages < 2}",
                      "total={totalPages}",
                      "value={page}",
                      "onChange={onPageChange}",
                      "/>",
                      "<Group>",
                      "<UiDebugModal data={companies} />",
                      "<UiPageLimit",
                      "data={gridLimits}",
                      "limit={limit}",
                      "setLimit={setLimit}",
                      "setPage={setPage}",
                      "/>",
                      "</Group>",
                      "</UiGroup>",
                      "</UiStack>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-grid.tsx",
                  },
                  "company-ui-info.tsx": {
                    "content": [
                      "import { Company } from '@proj/sdk';",
                      "import { UiInfoItems, UiInfoTable, UiTime } from '@pubkey-ui/core';",
                      "export function CompanyUiInfo({ company }: { company?: Company }) {",
                      "if (!company) return null;",
                      "const items: UiInfoItems = [",
                      "['name', company.name],",
                      "[",
                      "'Created At',",
                      "<UiTime size="xs" c="dimmed" date={new Date(company.createdAt ?? '0')} />,",
                      "],",
                      "[",
                      "'Updated At',",
                      "<UiTime size="xs" c="dimmed" date={new Date(company.updatedAt ?? '0')} />,",
                      "],",
                      "];",
                      "return <UiInfoTable items={items} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-info.tsx",
                  },
                  "company-ui-item.tsx": {
                    "content": [
                      "import { AvatarProps, Group, GroupProps, Stack, Text } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { UiAnchor, UiAnchorProps } from '@pubkey-ui/core';",
                      "import { CompanyUiAvatar } from './company-ui-avatar';",
                      "export function CompanyUiItem({",
                      "anchorProps,",
                      "avatarProps,",
                      "groupProps,",
                      "company,",
                      "to,",
                      "}: {",
                      "anchorProps?: UiAnchorProps;",
                      "avatarProps?: Omit<AvatarProps, 'src'>;",
                      "groupProps?: GroupProps;",
                      "company?: Company;",
                      "to?: string | null;",
                      "}) {",
                      "if (!company) return null;",
                      "return (",
                      "<UiAnchor to={to ?? undefined} underline="never" {...anchorProps}>",
                      "<Group gap="sm" {...groupProps}>",
                      "<CompanyUiAvatar company={company} {...avatarProps} />",
                      "<Stack gap={1}>",
                      "<Text size="lg" fw={500}>",
                      "{company?.name}",
                      "</Text>",
                      "</Stack>",
                      "</Group>",
                      "</UiAnchor>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-item.tsx",
                  },
                  "user-company-ui-create-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyUserCreateInput } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function UserCompanyUiCreateForm({",
                      "submit,",
                      "}: {",
                      "submit: (res: CompanyUserCreateInput) => Promise<boolean>;",
                      "}) {",
                      "const form = useForm<CompanyUserCreateInput>({",
                      "initialValues: {",
                      "name: '',",
                      "location: '',",
                      "phone: '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput",
                      "required",
                      "name="name"",
                      "label="name"",
                      "{...form.getInputProps('name')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/user-company-ui-create-form.tsx",
                  },
                  "user-company-ui-table.tsx": {
                    "content": [
                      "import { ActionIcon, Anchor, Group, ScrollArea } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { IconPencil, IconTrash } from '@tabler/icons-react';",
                      "import { DataTable, DataTableProps } from 'mantine-datatable';",
                      "import { Link } from 'react-router-dom';",
                      "export function UserCompanyUiTable({",
                      "deleteCompany,",
                      "companies = [],",
                      "onPageChange,",
                      "page,",
                      "recordsPerPage,",
                      "totalRecords,",
                      "}: {",
                      "deleteCompany: (company: Company) => void;",
                      "companies: Company[];",
                      "page: DataTableProps['page'];",
                      "totalRecords: DataTableProps['totalRecords'];",
                      "recordsPerPage: DataTableProps['recordsPerPage'];",
                      "onPageChange: (page: number) => void;",
                      "}) {",
                      "return (",
                      "<ScrollArea>",
                      "<DataTable",
                      "borderRadius="sm"",
                      "withTableBorder",
                      "shadow="xs"",
                      "onPageChange={onPageChange}",
                      "page={page ?? 1}",
                      "recordsPerPage={recordsPerPage ?? 10}",
                      "totalRecords={totalRecords ?? 1}",
                      "columns={[",
                      "{",
                      "accessor: 'name',",
                      "render: (item) => (",
                      "<Anchor component={Link} to={\`./\${item.id}\`} size="sm" fw={500}>",
                      "{item.name}",
                      "</Anchor>",
                      "),",
                      "},",
                      "{",
                      "accessor: 'actions',",
                      "title: 'Actions',",
                      "textAlign: 'right',",
                      "render: (item) => (",
                      "<Group gap="xs" justify="right">",
                      "<ActionIcon",
                      "color="brand"",
                      "variant="light"",
                      "size="sm"",
                      "component={Link}",
                      "to={\`./\${item.id}/settings\`}",
                      ">",
                      "<IconPencil size={16} />",
                      "</ActionIcon>",
                      "<ActionIcon",
                      "color="red"",
                      "variant="light"",
                      "size="sm"",
                      "onClick={() => deleteCompany(item)}",
                      ">",
                      "<IconTrash size={16} />",
                      "</ActionIcon>",
                      "</Group>",
                      "),",
                      "},",
                      "]}",
                      "records={companies}",
                      "/>",
                      "</ScrollArea>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/user-company-ui-table.tsx",
                  },
                  "user-company-ui-update-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyUserUpdateInput, Company } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function UserCompanyUiUpdateForm({",
                      "submit,",
                      "company,",
                      "}: {",
                      "submit: (res: CompanyUserUpdateInput) => Promise<boolean>;",
                      "company: Company;",
                      "}) {",
                      "const form = useForm<CompanyUserUpdateInput>({",
                      "initialValues: {",
                      "name: company.name ?? '',",
                      "location: company.location ?? '',",
                      "phone: company.phone ?? '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput name="name" label="name" {...form.getInputProps('name')} />",
                      "<TextInput",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/user-company-ui-update-form.tsx",
                  },
                },
                "path": "libs/test/company/ui/src/lib",
              },
            },
            "path": "libs/test/company/ui/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/ui",
      },
    },
    "path": "libs/test/company",
  },
  "core": {
    "children": {
      "data-access": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-core-data-access",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-core-data-access\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-core-data-access",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/core/data-access/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/core/data-access/src/index.ts",
              },
            },
            "path": "libs/test/core/data-access/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/tsconfig.lib.json",
          },
        },
        "path": "libs/test/core/data-access",
      },
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-core-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-core-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-core-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/core/feature/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/core/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "test-core-feature.tsx": {
                    "content": [
                      "/* eslint-disable-next-line */",
                      "export interface TestCoreFeatureProps {}",
                      "export function TestCoreFeature(props: TestCoreFeatureProps) {",
                      "return (",
                      "<div>",
                      "<h1>Welcome to TestCoreFeature!</h1>",
                      "</div>",
                      ");",
                      "}",
                      "export default TestCoreFeature;",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-feature.tsx",
                  },
                  "test-core-routes-admin.tsx": {
                    "content": [
                      "import { IconBuilding } from '@tabler/icons-react';",
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "const links = [];",
                      "const routes = [];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-admin.tsx",
                  },
                  "test-core-routes-manager.tsx": {
                    "content": [
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "const links = [];",
                      "const routes = [];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-manager.tsx",
                  },
                  "test-core-routes-user.tsx": {
                    "content": [
                      "import { IconBuilding } from '@tabler/icons-react';",
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "import { UserCompanyFeature } from '@proj/test-company-feature';",
                      "const links = [{ label: 'Companies', icon: IconBuilding, to: '/companies' }];",
                      "const routes = [{ path: '/companies/*', element: <UserCompanyFeature /> }];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-user.tsx",
                  },
                  "test-core-routes.tsx": {
                    "content": [
                      "/* eslint-disable-next-line */",
                      "export interface TestCoreRoutesProps {}",
                      "export function TestCoreRoutes(props: TestCoreRoutesProps) {",
                      "return (",
                      "<div>",
                      "<h1>Welcome to TestCoreRoutes!</h1>",
                      "</div>",
                      ");",
                      "}",
                      "export default TestCoreRoutes;",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes.tsx",
                  },
                },
                "path": "libs/test/core/feature/src/lib",
              },
            },
            "path": "libs/test/core/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/core/feature",
      },
    },
    "path": "libs/test/core",
  },
  "user": {
    "children": {
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-user-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-user-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-user-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/user/feature/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/user/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "admin-user-detail-feature.tsx": {
                    "content": [
                      "import { AdminCompanyFeature } from '@proj/test-company-feature';",
                      "export function AdminUserDetailFeature() {",
                      "const { userId } = useParams<{ userId: string }>() as { userId: string };",
                      "const tabs = [",
                      "{",
                      "path: 'settings',",
                      "label: 'Settings',",
                      "element: <AdminUserDetailFeatureSettings userId={userId} />,",
                      "},",
                      "{",
                      "path: 'identities',",
                      "label: 'Identities',",
                      "element: <AdminUserDetailFeatureIdentities userId={userId} />,",
                      "},",
                      "{",
                      "path: 'companies',",
                      "label: 'Companies',",
                      "element: <AdminCompanyFeature ownerId={userId} />,",
                      "},",
                      "];",
                      "return <UiTabRoutes tabs={tabs} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/user/feature/src/lib/admin-user-detail-feature.tsx",
                  },
                },
                "path": "libs/test/user/feature/src/lib",
              },
            },
            "path": "libs/test/user/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/user/feature",
      },
    },
    "path": "libs/test/user",
  },
}
`;

exports[`web-crud generator should create crud with modelParentId 1`] = `
{
  "company": {
    "children": {
      "data-access": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-data-access",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-data-access\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-data-access",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/data-access/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:data-access"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "export * from './lib/use-manager-find-many-company';",
                  "export * from './lib/use-manager-find-one-company';",
                ],
                "isBinary": false,
                "path": "libs/test/company/data-access/src/index.ts",
              },
              "lib": {
                "children": {
                  "use-manager-find-many-company.ts": {
                    "content": [
                      "import {",
                      "CompanyManagerCreateInput,",
                      "CompanyManagerFindManyInput,",
                      "} from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "import { useState } from 'react';",
                      "export function useManagerFindManyCompany(",
                      "props: Partial<CompanyManagerFindManyInput> = {}",
                      ") {",
                      "const sdk = useSdk();",
                      "const [limit, setLimit] = useState(props?.limit ?? 10);",
                      "const [page, setPage] = useState(props?.page ?? 1);",
                      "const [search, setSearch] = useState<string>(props?.search ?? '');",
                      "const input: CompanyManagerFindManyInput = { page, limit, search };",
                      "const query = useQuery({",
                      "queryKey: ['manager', 'find-many-company', input],",
                      "queryFn: () =>",
                      "sdk.managerFindManyCompany({ input }).then((res) => res.data),",
                      "});",
                      "const total = query.data?.paging?.meta?.totalCount ?? 0;",
                      "const items = query.data?.paging.data ?? [];",
                      "return {",
                      "items,",
                      "query,",
                      "pagination: {",
                      "page,",
                      "setPage,",
                      "limit,",
                      "setLimit,",
                      "total,",
                      "},",
                      "setSearch,",
                      "createCompany: (input: CompanyManagerCreateInput) =>",
                      "sdk",
                      ".managerCreateCompany({ input })",
                      ".then((res) => res.data)",
                      ".then((res) => {",
                      "if (res.created) {",
                      "toastSuccess(\`Company created\`);",
                      "} else {",
                      "toastError(\`Company not created\`);",
                      "}",
                      "return res.created;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return undefined;",
                      "}),",
                      "deleteCompany: (companyId: string) =>",
                      "sdk.managerDeleteCompany({ companyId }).then(() => {",
                      "toastSuccess('Company deleted');",
                      "return query.refetch();",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-manager-find-many-company.ts",
                  },
                  "use-manager-find-one-company.ts": {
                    "content": [
                      "import { CompanyManagerUpdateInput } from '@proj/sdk';",
                      "import { useSdk } from '@proj/test-core-data-access';",
                      "import { toastError, toastSuccess } from '@pubkey-ui/core';",
                      "import { useQuery } from '@tanstack/react-query';",
                      "export function useManagerFindOneCompany({ companyId }: { companyId: string }) {",
                      "const sdk = useSdk();",
                      "const query = useQuery({",
                      "queryKey: ['manager', 'find-one-company', companyId],",
                      "queryFn: () =>",
                      "sdk.managerFindOneCompany({ companyId }).then((res) => res.data),",
                      "retry: 0,",
                      "});",
                      "const item = query.data?.item ?? undefined;",
                      "return {",
                      "item,",
                      "query,",
                      "updateCompany: async (input: CompanyManagerUpdateInput) =>",
                      "sdk",
                      ".managerUpdateCompany({ companyId, input })",
                      ".then((res) => res.data)",
                      ".then(async (res) => {",
                      "if (res) {",
                      "toastSuccess('Company updated');",
                      "await query.refetch();",
                      "return true;",
                      "}",
                      "toastError('Company not updated');",
                      "return false;",
                      "})",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "}),",
                      "};",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/data-access/src/lib/use-manager-find-one-company.ts",
                  },
                },
                "path": "libs/test/company/data-access/src/lib",
              },
            },
            "path": "libs/test/company/data-access/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/data-access/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/data-access",
      },
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/feature/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:feature"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "import { lazy } from 'react';",
                  "export const ManagerCompanyFeature = lazy(",
                  "() => import('./lib/manager-company.routes')",
                  ");",
                ],
                "isBinary": false,
                "path": "libs/test/company/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "manager-company-create.feature.tsx": {
                    "content": [
                      "import { CompanyManagerCreateInput } from '@proj/sdk';",
                      "import { useManagerFindManyCompany } from '@proj/test-company-data-access';",
                      "import { ManagerCompanyUiCreateForm } from '@proj/test-company-ui';",
                      "import { toastError, UiBack, UiCard, UiPage } from '@pubkey-ui/core';",
                      "import { useNavigate } from 'react-router-dom';",
                      "export default function ManagerCompanyCreateFeature() {",
                      "const navigate = useNavigate();",
                      "const { createCompany } = useManagerFindManyCompany();",
                      "async function submit(input: CompanyManagerCreateInput) {",
                      "return createCompany(input)",
                      ".then((res) => {",
                      "if (res) {",
                      "navigate(\`../\${res?.id}\`);",
                      "}",
                      "})",
                      ".then(() => true)",
                      ".catch((err) => {",
                      "toastError(err.message);",
                      "return false;",
                      "});",
                      "}",
                      "return (",
                      "<UiPage leftAction={<UiBack />} title="Create Company">",
                      "<UiCard>",
                      "<ManagerCompanyUiCreateForm submit={submit} />",
                      "</UiCard>",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-create.feature.tsx",
                  },
                  "manager-company-detail-info.tab.tsx": {
                    "content": [
                      "import { useManagerFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiInfo } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function ManagerCompanyDetailInfoTab({",
                      "companyId,",
                      "}: {",
                      "companyId: string;",
                      "}) {",
                      "const { item, query } = useManagerFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<CompanyUiInfo company={item} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-detail-info.tab.tsx",
                  },
                  "manager-company-detail-settings.tab.tsx": {
                    "content": [
                      "import { useManagerFindOneCompany } from '@proj/test-company-data-access';",
                      "import { ManagerCompanyUiUpdateForm } from '@proj/test-company-ui';",
                      "import { UiCard, UiError, UiLoader } from '@pubkey-ui/core';",
                      "export function ManagerCompanyDetailSettingsTab({",
                      "companyId,",
                      "}: {",
                      "companyId: string;",
                      "}) {",
                      "const { item, query, updateCompany } = useManagerFindOneCompany({",
                      "companyId,",
                      "});",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "return (",
                      "<UiCard>",
                      "<ManagerCompanyUiUpdateForm company={item} submit={updateCompany} />",
                      "</UiCard>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-detail-settings.tab.tsx",
                  },
                  "manager-company-detail.feature.tsx": {
                    "content": [
                      "import { Group } from '@mantine/core';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiError,",
                      "UiLoader,",
                      "UiPage,",
                      "UiTabRoute,",
                      "UiTabRoutes,",
                      "} from '@pubkey-ui/core';",
                      "import { useManagerFindOneCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiItem } from '@proj/test-company-ui';",
                      "import { useParams } from 'react-router-dom';",
                      "import { ManagerCompanyDetailInfoTab } from './manager-company-detail-info.tab';",
                      "import { ManagerCompanyDetailSettingsTab } from './manager-company-detail-settings.tab';",
                      "export default function ManagerCompanyDetailFeature() {",
                      "const { companyId } = useParams<{ companyId: string }>() as {",
                      "companyId: string;",
                      "};",
                      "const { item, query } = useManagerFindOneCompany({ companyId });",
                      "if (query.isLoading) {",
                      "return <UiLoader />;",
                      "}",
                      "if (!item) {",
                      "return <UiError message="Company not found." />;",
                      "}",
                      "const tabs: UiTabRoute[] = [",
                      "{",
                      "path: 'info',",
                      "label: 'Info',",
                      "element: <ManagerCompanyDetailInfoTab companyId={companyId} />,",
                      "},",
                      "{",
                      "path: 'settings',",
                      "label: 'Settings',",
                      "element: <ManagerCompanyDetailSettingsTab companyId={companyId} />,",
                      "},",
                      "];",
                      "return (",
                      "<UiPage",
                      "title={<CompanyUiItem company={item} />}",
                      "leftAction={<UiBack />}",
                      "rightAction={",
                      "<Group>",
                      "<UiDebugModal data={item} />",
                      "</Group>",
                      "}",
                      ">",
                      "<UiTabRoutes tabs={tabs} />",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-detail.feature.tsx",
                  },
                  "manager-company-list.feature.tsx": {
                    "content": [
                      "import { Button, Group } from '@mantine/core';",
                      "import { UiPageLimit, UiSearchField } from '@proj/test-core-ui';",
                      "import { useManagerFindManyCompany } from '@proj/test-company-data-access';",
                      "import { CompanyUiGrid } from '@proj/test-company-ui';",
                      "import {",
                      "UiBack,",
                      "UiDebugModal,",
                      "UiInfo,",
                      "UiLoader,",
                      "UiPage,",
                      "} from '@pubkey-ui/core';",
                      "import { Link } from 'react-router-dom';",
                      "export default function ManagerCompanyListFeature() {",
                      "const { items, pagination, query, setSearch } = useManagerFindManyCompany({",
                      "limit: 12,",
                      "});",
                      "return (",
                      "<UiPage",
                      "title="Companies"",
                      "leftAction={<UiBack />}",
                      "rightAction={",
                      "<Group>",
                      "<UiDebugModal data={items} />",
                      "<Button component={Link} to="create">",
                      "Create",
                      "</Button>",
                      "</Group>",
                      "}",
                      ">",
                      "<Group>",
                      "<UiSearchField placeholder="Search company" setSearch={setSearch} />",
                      "</Group>",
                      "{query.isLoading ? (",
                      "<UiLoader />",
                      ") : items?.length ? (",
                      "<CompanyUiGrid",
                      "companies={items}",
                      "page={pagination.page}",
                      "totalRecords={pagination.total}",
                      "onPageChange={pagination.setPage}",
                      "limit={pagination.limit}",
                      "setLimit={pagination.setLimit}",
                      "setPage={pagination.setPage}",
                      "/>",
                      ") : (",
                      "<UiInfo message="No companies found" />",
                      ")}",
                      "</UiPage>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company-list.feature.tsx",
                  },
                  "manager-company.routes.tsx": {
                    "content": [
                      "import { lazy } from 'react';",
                      "import { useRoutes } from 'react-router-dom';",
                      "const Create = lazy(() => import('./manager-company-create.feature'));",
                      "const Detail = lazy(() => import('./manager-company-detail.feature'));",
                      "const List = lazy(() => import('./manager-company-list.feature'));",
                      "export default function ManagerCompanyRoutes() {",
                      "return useRoutes([",
                      "{ path: '', element: <List /> },",
                      "{ path: 'create', element: <Create /> },",
                      "{ path: ':companyId/*', element: <Detail /> },",
                      "]);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/feature/src/lib/manager-company.routes.tsx",
                  },
                },
                "path": "libs/test/company/feature/src/lib",
              },
            },
            "path": "libs/test/company/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/feature",
      },
      "ui": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-company-ui",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-company-ui\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-company-ui",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/company/ui/src",",
              ""projectType": "library",",
              ""tags": ["app:test", "type:ui"],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [
                  "export * from './lib/manager-company-ui-create-form';",
                  "export * from './lib/manager-company-ui-table';",
                  "export * from './lib/manager-company-ui-update-form';",
                  "export * from './lib/company-ui-avatar';",
                  "export * from './lib/company-ui-grid';",
                  "export * from './lib/company-ui-grid-item';",
                  "export * from './lib/company-ui-info';",
                  "export * from './lib/company-ui-item';",
                ],
                "isBinary": false,
                "path": "libs/test/company/ui/src/index.ts",
              },
              "lib": {
                "children": {
                  "company-ui-avatar.tsx": {
                    "content": [
                      "import { Company } from '@proj/sdk';",
                      "import { UiAvatar, UiAvatarProps } from '@pubkey-ui/core';",
                      "export type CompanyUiAvatarProps = UiAvatarProps & {",
                      "company?: Company;",
                      "};",
                      "export function CompanyUiAvatar({ company, ...props }: CompanyUiAvatarProps) {",
                      "return <UiAvatar url={undefined} name={company?.name} {...props} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-avatar.tsx",
                  },
                  "company-ui-grid-item.tsx": {
                    "content": [
                      "import { Paper } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { UiDebugModal, UiGroup } from '@pubkey-ui/core';",
                      "import { CompanyUiItem } from './company-ui-item';",
                      "export function CompanyUiGridItem({",
                      "company,",
                      "to,",
                      "}: {",
                      "company: Company;",
                      "to?: string;",
                      "}) {",
                      "return (",
                      "<Paper withBorder p="md">",
                      "<UiGroup>",
                      "<CompanyUiItem company={company} to={to} />",
                      "<UiDebugModal data={company} />",
                      "</UiGroup>",
                      "</Paper>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-grid-item.tsx",
                  },
                  "company-ui-grid.tsx": {
                    "content": [
                      "import { Group, Pagination, SimpleGrid } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { gridLimits, UiPageLimit } from '@proj/test-core-ui';",
                      "import { UiDebugModal, UiGroup, UiStack } from '@pubkey-ui/core';",
                      "import { DataTableProps } from 'mantine-datatable';",
                      "import { CompanyUiGridItem } from './company-ui-grid-item';",
                      "export function CompanyUiGrid({",
                      "companies = [],",
                      "onPageChange,",
                      "page,",
                      "totalRecords,",
                      "limit,",
                      "setLimit,",
                      "setPage,",
                      "}: {",
                      "companies: Company[];",
                      "page: DataTableProps['page'];",
                      "totalRecords: number;",
                      "onPageChange: (page: number) => void;",
                      "limit: number;",
                      "setLimit: (limit: number) => void;",
                      "setPage: (page: number) => void;",
                      "}) {",
                      "const totalPages = totalRecords / limit + 1;",
                      "return (",
                      "<UiStack>",
                      "<SimpleGrid cols={{ base: 1, sm: 2, md: 3 }} spacing="md">",
                      "{companies.map((company) => (",
                      "<CompanyUiGridItem",
                      "key={company.id}",
                      "to={company.id}",
                      "company={company}",
                      "/>",
                      "))}",
                      "</SimpleGrid>",
                      "<UiGroup>",
                      "<Pagination",
                      "disabled={totalPages < 2}",
                      "total={totalPages}",
                      "value={page}",
                      "onChange={onPageChange}",
                      "/>",
                      "<Group>",
                      "<UiDebugModal data={companies} />",
                      "<UiPageLimit",
                      "data={gridLimits}",
                      "limit={limit}",
                      "setLimit={setLimit}",
                      "setPage={setPage}",
                      "/>",
                      "</Group>",
                      "</UiGroup>",
                      "</UiStack>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-grid.tsx",
                  },
                  "company-ui-info.tsx": {
                    "content": [
                      "import { Company } from '@proj/sdk';",
                      "import { UiInfoItems, UiInfoTable, UiTime } from '@pubkey-ui/core';",
                      "export function CompanyUiInfo({ company }: { company?: Company }) {",
                      "if (!company) return null;",
                      "const items: UiInfoItems = [",
                      "['name', company.name],",
                      "[",
                      "'Created At',",
                      "<UiTime size="xs" c="dimmed" date={new Date(company.createdAt ?? '0')} />,",
                      "],",
                      "[",
                      "'Updated At',",
                      "<UiTime size="xs" c="dimmed" date={new Date(company.updatedAt ?? '0')} />,",
                      "],",
                      "];",
                      "return <UiInfoTable items={items} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-info.tsx",
                  },
                  "company-ui-item.tsx": {
                    "content": [
                      "import { AvatarProps, Group, GroupProps, Stack, Text } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { UiAnchor, UiAnchorProps } from '@pubkey-ui/core';",
                      "import { CompanyUiAvatar } from './company-ui-avatar';",
                      "export function CompanyUiItem({",
                      "anchorProps,",
                      "avatarProps,",
                      "groupProps,",
                      "company,",
                      "to,",
                      "}: {",
                      "anchorProps?: UiAnchorProps;",
                      "avatarProps?: Omit<AvatarProps, 'src'>;",
                      "groupProps?: GroupProps;",
                      "company?: Company;",
                      "to?: string | null;",
                      "}) {",
                      "if (!company) return null;",
                      "return (",
                      "<UiAnchor to={to ?? undefined} underline="never" {...anchorProps}>",
                      "<Group gap="sm" {...groupProps}>",
                      "<CompanyUiAvatar company={company} {...avatarProps} />",
                      "<Stack gap={1}>",
                      "<Text size="lg" fw={500}>",
                      "{company?.name}",
                      "</Text>",
                      "</Stack>",
                      "</Group>",
                      "</UiAnchor>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/company-ui-item.tsx",
                  },
                  "manager-company-ui-create-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyManagerCreateInput } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function ManagerCompanyUiCreateForm({",
                      "submit,",
                      "}: {",
                      "submit: (res: CompanyManagerCreateInput) => Promise<boolean>;",
                      "}) {",
                      "const form = useForm<CompanyManagerCreateInput>({",
                      "initialValues: {",
                      "name: '',",
                      "location: '',",
                      "phone: '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput",
                      "required",
                      "name="name"",
                      "label="name"",
                      "{...form.getInputProps('name')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "required",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/manager-company-ui-create-form.tsx",
                  },
                  "manager-company-ui-table.tsx": {
                    "content": [
                      "import { ActionIcon, Anchor, Group, ScrollArea } from '@mantine/core';",
                      "import { Company } from '@proj/sdk';",
                      "import { IconPencil, IconTrash } from '@tabler/icons-react';",
                      "import { DataTable, DataTableProps } from 'mantine-datatable';",
                      "import { Link } from 'react-router-dom';",
                      "export function ManagerCompanyUiTable({",
                      "deleteCompany,",
                      "companies = [],",
                      "onPageChange,",
                      "page,",
                      "recordsPerPage,",
                      "totalRecords,",
                      "}: {",
                      "deleteCompany: (company: Company) => void;",
                      "companies: Company[];",
                      "page: DataTableProps['page'];",
                      "totalRecords: DataTableProps['totalRecords'];",
                      "recordsPerPage: DataTableProps['recordsPerPage'];",
                      "onPageChange: (page: number) => void;",
                      "}) {",
                      "return (",
                      "<ScrollArea>",
                      "<DataTable",
                      "borderRadius="sm"",
                      "withTableBorder",
                      "shadow="xs"",
                      "onPageChange={onPageChange}",
                      "page={page ?? 1}",
                      "recordsPerPage={recordsPerPage ?? 10}",
                      "totalRecords={totalRecords ?? 1}",
                      "columns={[",
                      "{",
                      "accessor: 'name',",
                      "render: (item) => (",
                      "<Anchor component={Link} to={\`./\${item.id}\`} size="sm" fw={500}>",
                      "{item.name}",
                      "</Anchor>",
                      "),",
                      "},",
                      "{",
                      "accessor: 'actions',",
                      "title: 'Actions',",
                      "textAlign: 'right',",
                      "render: (item) => (",
                      "<Group gap="xs" justify="right">",
                      "<ActionIcon",
                      "color="brand"",
                      "variant="light"",
                      "size="sm"",
                      "component={Link}",
                      "to={\`./\${item.id}/settings\`}",
                      ">",
                      "<IconPencil size={16} />",
                      "</ActionIcon>",
                      "<ActionIcon",
                      "color="red"",
                      "variant="light"",
                      "size="sm"",
                      "onClick={() => deleteCompany(item)}",
                      ">",
                      "<IconTrash size={16} />",
                      "</ActionIcon>",
                      "</Group>",
                      "),",
                      "},",
                      "]}",
                      "records={companies}",
                      "/>",
                      "</ScrollArea>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/manager-company-ui-table.tsx",
                  },
                  "manager-company-ui-update-form.tsx": {
                    "content": [
                      "import { Button, Group, TextInput } from '@mantine/core';",
                      "import { useForm } from '@mantine/form';",
                      "import { CompanyManagerUpdateInput, Company } from '@proj/sdk';",
                      "import { UiStack } from '@pubkey-ui/core';",
                      "export function ManagerCompanyUiUpdateForm({",
                      "submit,",
                      "company,",
                      "}: {",
                      "submit: (res: CompanyManagerUpdateInput) => Promise<boolean>;",
                      "company: Company;",
                      "}) {",
                      "const form = useForm<CompanyManagerUpdateInput>({",
                      "initialValues: {",
                      "name: company.name ?? '',",
                      "location: company.location ?? '',",
                      "phone: company.phone ?? '',",
                      "},",
                      "});",
                      "return (",
                      "<form onSubmit={form.onSubmit((values) => submit(values))}>",
                      "<UiStack>",
                      "<TextInput name="name" label="name" {...form.getInputProps('name')} />",
                      "<TextInput",
                      "name="location"",
                      "label="location"",
                      "{...form.getInputProps('location')}",
                      "/>",
                      "<TextInput",
                      "name="phone"",
                      "label="phone"",
                      "{...form.getInputProps('phone')}",
                      "/>",
                      "<Group justify="right">",
                      "<Button type="submit">Save</Button>",
                      "</Group>",
                      "</UiStack>",
                      "</form>",
                      ");",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/company/ui/src/lib/manager-company-ui-update-form.tsx",
                  },
                },
                "path": "libs/test/company/ui/src/lib",
              },
            },
            "path": "libs/test/company/ui/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/company/ui/tsconfig.lib.json",
          },
        },
        "path": "libs/test/company/ui",
      },
    },
    "path": "libs/test/company",
  },
  "core": {
    "children": {
      "data-access": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-core-data-access",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-core-data-access\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-core-data-access",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/core/data-access/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/core/data-access/src/index.ts",
              },
            },
            "path": "libs/test/core/data-access/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/data-access/tsconfig.lib.json",
          },
        },
        "path": "libs/test/core/data-access",
      },
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-core-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-core-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-core-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/core/feature/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/core/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "test-core-feature.tsx": {
                    "content": [
                      "/* eslint-disable-next-line */",
                      "export interface TestCoreFeatureProps {}",
                      "export function TestCoreFeature(props: TestCoreFeatureProps) {",
                      "return (",
                      "<div>",
                      "<h1>Welcome to TestCoreFeature!</h1>",
                      "</div>",
                      ");",
                      "}",
                      "export default TestCoreFeature;",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-feature.tsx",
                  },
                  "test-core-routes-admin.tsx": {
                    "content": [
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "const links = [];",
                      "const routes = [];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-admin.tsx",
                  },
                  "test-core-routes-manager.tsx": {
                    "content": [
                      "import { IconBuilding } from '@tabler/icons-react';",
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "import { ManagerCompanyFeature } from '@proj/test-company-feature';",
                      "const links = [{ label: 'Companies', icon: IconBuilding, to: '/companies' }];",
                      "const routes = [{ path: '/companies/*', element: <ManagerCompanyFeature /> }];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-manager.tsx",
                  },
                  "test-core-routes-user.tsx": {
                    "content": [
                      "import { RouteObject, useRoutes } from 'react-router-dom';",
                      "const links = [];",
                      "const routes = [];",
                      "export default function () {",
                      "return useRoutes(routes);",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes-user.tsx",
                  },
                  "test-core-routes.tsx": {
                    "content": [
                      "/* eslint-disable-next-line */",
                      "export interface TestCoreRoutesProps {}",
                      "export function TestCoreRoutes(props: TestCoreRoutesProps) {",
                      "return (",
                      "<div>",
                      "<h1>Welcome to TestCoreRoutes!</h1>",
                      "</div>",
                      ");",
                      "}",
                      "export default TestCoreRoutes;",
                    ],
                    "isBinary": false,
                    "path": "libs/test/core/feature/src/lib/test-core-routes.tsx",
                  },
                },
                "path": "libs/test/core/feature/src/lib",
              },
            },
            "path": "libs/test/core/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/core/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/core/feature",
      },
    },
    "path": "libs/test/core",
  },
  "user": {
    "children": {
      "feature": {
        "children": {
          ".babelrc": {
            "content": [
              "{",
              ""presets": [",
              "[",
              ""@nx/react/babel",",
              "{",
              ""runtime": "automatic",",
              ""useBuiltIns": "usage"",
              "}",
              "]",
              "],",
              ""plugins": []",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/.babelrc",
          },
          ".eslintrc.json": {
            "content": [
              "{",
              ""extends": ["plugin:@nx/react", "../../../../.eslintrc.json"],",
              ""ignorePatterns": ["!**/*"],",
              ""overrides": [",
              "{",
              ""files": ["*.ts", "*.tsx", "*.js", "*.jsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.ts", "*.tsx"],",
              ""rules": {}",
              "},",
              "{",
              ""files": ["*.js", "*.jsx"],",
              ""rules": {}",
              "}",
              "]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/.eslintrc.json",
          },
          "README.md": {
            "content": [
              "# test-user-feature",
              "This library was generated with [Nx](https://nx.dev).",
              "## Running unit tests",
              "Run \`nx test test-user-feature\` to execute the unit tests via [Jest](https://jestjs.io).",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/README.md",
          },
          "project.json": {
            "content": [
              "{",
              ""name": "test-user-feature",",
              ""$schema": "../../../../node_modules/nx/schemas/project-schema.json",",
              ""sourceRoot": "libs/test/user/feature/src",",
              ""projectType": "library",",
              ""tags": [],",
              ""targets": {",
              ""lint": {",
              ""executor": "@nx/eslint:lint",",
              ""outputs": ["{options.outputFile}"]",
              "}",
              "}",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/project.json",
          },
          "src": {
            "children": {
              "index.ts": {
                "content": [],
                "isBinary": false,
                "path": "libs/test/user/feature/src/index.ts",
              },
              "lib": {
                "children": {
                  "admin-user-detail-feature.tsx": {
                    "content": [
                      "export function AdminUserDetailFeature() {",
                      "const { userId } = useParams<{ userId: string }>() as { userId: string };",
                      "const tabs = [",
                      "{",
                      "path: 'settings',",
                      "label: 'Settings',",
                      "element: <AdminUserDetailFeatureSettings userId={userId} />,",
                      "},",
                      "{",
                      "path: 'identities',",
                      "label: 'Identities',",
                      "element: <AdminUserDetailFeatureIdentities userId={userId} />,",
                      "},",
                      "];",
                      "return <UiTabRoutes tabs={tabs} />;",
                      "}",
                    ],
                    "isBinary": false,
                    "path": "libs/test/user/feature/src/lib/admin-user-detail-feature.tsx",
                  },
                },
                "path": "libs/test/user/feature/src/lib",
              },
            },
            "path": "libs/test/user/feature/src",
          },
          "tsconfig.json": {
            "content": [
              "{",
              ""compilerOptions": {",
              ""jsx": "react-jsx",",
              ""allowJs": false,",
              ""esModuleInterop": false,",
              ""allowSyntheticDefaultImports": true",
              "},",
              ""files": [],",
              ""include": [],",
              ""references": [",
              "{",
              ""path": "./tsconfig.lib.json"",
              "}",
              "],",
              ""extends": "../../../../tsconfig.base.json"",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/tsconfig.json",
          },
          "tsconfig.lib.json": {
            "content": [
              "{",
              ""extends": "./tsconfig.json",",
              ""compilerOptions": {",
              ""outDir": "../../../../dist/out-tsc",",
              ""types": [",
              ""node",",
              ""@nx/react/typings/cssmodule.d.ts",",
              ""@nx/react/typings/image.d.ts"",
              "]",
              "},",
              ""exclude": [",
              ""jest.config.ts",",
              ""src/**/*.spec.ts",",
              ""src/**/*.test.ts",",
              ""src/**/*.spec.tsx",",
              ""src/**/*.test.tsx",",
              ""src/**/*.spec.js",",
              ""src/**/*.test.js",",
              ""src/**/*.spec.jsx",",
              ""src/**/*.test.jsx"",
              "],",
              ""include": ["src/**/*.js", "src/**/*.jsx", "src/**/*.ts", "src/**/*.tsx"]",
              "}",
            ],
            "isBinary": false,
            "path": "libs/test/user/feature/tsconfig.lib.json",
          },
        },
        "path": "libs/test/user/feature",
      },
    },
    "path": "libs/test/user",
  },
}
`;
