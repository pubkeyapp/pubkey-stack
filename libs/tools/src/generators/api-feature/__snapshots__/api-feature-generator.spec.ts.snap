// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`api-feature generator should generate the feature libraries with crud for admin and user  3`] = `
"export * from './lib/api-test.data-access.module';
export * from './lib/api-test.service';
export * from './lib/entity/test.entity';
export * from './lib/dto/test-admin-create.input';
export * from './lib/dto/test-admin-find-many.input';
export * from './lib/dto/test-admin-update.input';
export * from './lib/dto/test-user-create.input';
export * from './lib/dto/test-user-find-many.input';
export * from './lib/dto/test-user-update.input';
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  4`] = `
"import { Injectable } from '@nestjs/common';
import { TestAdminCreateInput } from './dto/test-admin-create.input';
import { TestAdminFindManyInput } from './dto/test-admin-find-many.input';
import { TestAdminUpdateInput } from './dto/test-admin-update.input';
import { TestPaging } from './entity/test.entity';
import { getTestWhereAdminInput } from './helpers/get-test-where-admin.input';
import { ApiTestDataService } from './api-test-data.service';

@Injectable()
export class ApiTestDataAdminService {
  constructor(private readonly data: ApiTestDataService) {}

  async createTest(input: TestAdminCreateInput) {
    return this.data.create(input);
  }

  async deleteTest(testId: string) {
    return this.data.delete(testId);
  }

  async findManyTest(input: TestAdminFindManyInput): Promise<TestPaging> {
    return this.data.findMany({
      orderBy: { createdAt: 'desc' },
      where: getTestWhereAdminInput(input),
      limit: input.limit,
      page: input.page,
    });
  }

  async findOneTest(testId: string) {
    return this.data.findOne(testId);
  }

  async updateTest(testId: string, input: TestAdminUpdateInput) {
    return this.data.update(testId, input);
  }
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  5`] = `
"import { Injectable } from '@nestjs/common';
import { TestUserCreateInput } from './dto/test-user-create.input';
import { TestUserFindManyInput } from './dto/test-user-find-many.input';
import { TestUserUpdateInput } from './dto/test-user-update.input';
import { TestPaging } from './entity/test.entity';
import { getTestWhereUserInput } from './helpers/get-test-where-user.input';
import { ApiTestDataService } from './api-test-data.service';

@Injectable()
export class ApiTestDataUserService {
  constructor(private readonly data: ApiTestDataService) {}

  async createTest(input: TestUserCreateInput) {
    return this.data.create(input);
  }

  async deleteTest(testId: string) {
    return this.data.delete(testId);
  }

  async findManyTest(input: TestUserFindManyInput): Promise<TestPaging> {
    return this.data.findMany({
      orderBy: { createdAt: 'desc' },
      where: getTestWhereUserInput(input),
      limit: input.limit,
      page: input.page,
    });
  }

  async findOneTest(testId: string) {
    return this.data.findOne(testId);
  }

  async updateTest(testId: string, input: TestUserUpdateInput) {
    return this.data.update(testId, input);
  }
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  6`] = `
"import { Injectable } from '@nestjs/common';
import { Prisma } from '@prisma/client';
import { ApiCoreService, PagingInputFields } from '@proj/api-core-data-access';
import { TestPaging } from './entity/test.entity';

@Injectable()
export class ApiTestDataService {
  constructor(private readonly core: ApiCoreService) {}

  async create(input: Prisma.TestUncheckedCreateInput) {
    return this.core.data.test.create({ data: input });
  }

  async delete(testId: string) {
    await this.findOne(testId);
    const deleted = await this.core.data.test.delete({ where: { id: testId } });
    return !!deleted;
  }

  async findMany({
    limit = 10,
    page = 1,
    ...input
  }: Prisma.TestFindManyArgs & PagingInputFields): Promise<TestPaging> {
    return this.core.data.test
      .paginate(input)
      .withPages({ limit, page })
      .then(([data, meta]) => ({ data, meta }));
  }

  async findOne(testId: string) {
    const found = await this.core.data.test.findUnique({
      where: { id: testId },
    });
    if (!found) {
      throw new Error('Test not found');
    }
    return found;
  }

  async update(testId: string, input: Prisma.TestUpdateInput) {
    return this.core.data.test.update({ where: { id: testId }, data: input });
  }
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  7`] = `
"import { Module } from '@nestjs/common';
import { ApiCoreDataAccessModule } from '@proj/api-core-data-access';
import { ApiTestService } from './api-test.service';
import { ApiTestDataService } from './api-test-data.service';
import { ApiTestDataAdminService } from './api-test-data-admin.service';
import { ApiTestDataUserService } from './api-test-data-user.service';

@Module({
  imports: [ApiCoreDataAccessModule],
  providers: [
    ApiTestService,
    ApiTestDataService,
    ApiTestDataAdminService,
    ApiTestDataUserService,
  ],
  exports: [ApiTestService],
})
export class ApiTestDataAccessModule {}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  8`] = `
"import { Injectable } from '@nestjs/common';
import { ApiTestDataService } from './api-test-data.service';
import { ApiTestDataAdminService } from './api-test-data-admin.service';
import { ApiTestDataUserService } from './api-test-data-user.service';

@Injectable()
export class ApiTestService {
  constructor(
    readonly data: ApiTestDataService,
    readonly admin: ApiTestDataAdminService,
    readonly user: ApiTestDataUserService
  ) {}
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  9`] = `
"import { Field, InputType } from '@nestjs/graphql';

@InputType()
export class TestAdminCreateInput {
  @Field()
  name!: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  10`] = `
"import { Field, InputType } from '@nestjs/graphql';
import { PagingInput } from '@proj/api-core-data-access';

@InputType()
export class TestAdminFindManyInput extends PagingInput() {
  @Field({ nullable: true })
  search?: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  11`] = `
"import { Field, InputType } from '@nestjs/graphql';

@InputType()
export class TestAdminUpdateInput {
  @Field({ nullable: true })
  name?: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  12`] = `
"import { Field, InputType } from '@nestjs/graphql';

@InputType()
export class TestUserCreateInput {
  @Field()
  name!: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  13`] = `
"import { Field, InputType } from '@nestjs/graphql';
import { PagingInput } from '@proj/api-core-data-access';

@InputType()
export class TestUserFindManyInput extends PagingInput() {
  @Field({ nullable: true })
  search?: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  14`] = `
"import { Field, InputType } from '@nestjs/graphql';

@InputType()
export class TestUserUpdateInput {
  @Field({ nullable: true })
  name?: string;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  15`] = `
"import { Field, ObjectType } from '@nestjs/graphql';
import { PagingResponse } from '@proj/api-core-data-access';

@ObjectType()
export class Test {
  @Field()
  id!: string;
  @Field({ nullable: true })
  createdAt?: Date;
  @Field({ nullable: true })
  updatedAt?: Date;

  @Field()
  name!: string;
}

@ObjectType()
export class TestPaging extends PagingResponse<Test>(Test) {}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  16`] = `
"import { Prisma } from '@prisma/client';
import { TestAdminFindManyInput } from '../dto/test-admin-find-many.input';

export function getTestWhereAdminInput(
  input: TestAdminFindManyInput
): Prisma.TestWhereInput {
  const where: Prisma.TestWhereInput = {};

  if (input.search) {
    where.OR = [
      { id: { contains: input.search, mode: 'insensitive' } },
      { name: { contains: input.search, mode: 'insensitive' } },
    ];
  }

  return where;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  17`] = `
"import { Prisma } from '@prisma/client';
import { TestUserFindManyInput } from '../dto/test-user-find-many.input';

export function getTestWhereUserInput(
  input: TestUserFindManyInput
): Prisma.TestWhereInput {
  const where: Prisma.TestWhereInput = {};

  if (input.search) {
    where.OR = [
      { id: { contains: input.search, mode: 'insensitive' } },
      { name: { contains: input.search, mode: 'insensitive' } },
    ];
  }

  return where;
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  18`] = `
"export * from './lib/api-test.feature.module';
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  19`] = `
"import { Resolver } from '@nestjs/graphql';
import { ApiTestService } from '@proj/api-test-data-access';
import { ApiAuthGraphQLAdminGuard } from '@proj/api-auth-data-access';
import { Mutation, Query, Args } from '@nestjs/graphql';
import { UseGuards } from '@nestjs/common';
import {
  TestAdminCreateInput,
  TestAdminFindManyInput,
  Test,
  TestPaging,
  TestAdminUpdateInput,
} from '@proj/api-test-data-access';

@Resolver()
@UseGuards(ApiAuthGraphQLAdminGuard)
export class ApiTestAdminResolver {
  constructor(private readonly service: ApiTestService) {}

  @Mutation(() => Test, { nullable: true })
  adminCreateTest(@Args('input') input: TestAdminCreateInput) {
    return this.service.admin.createTest(input);
  }

  @Mutation(() => Boolean, { nullable: true })
  adminDeleteTest(@Args('testId') testId: string) {
    return this.service.admin.deleteTest(testId);
  }

  @Query(() => TestPaging)
  adminFindManyTest(@Args('input') input: TestAdminFindManyInput) {
    return this.service.admin.findManyTest(input);
  }

  @Query(() => Test, { nullable: true })
  adminFindOneTest(@Args('testId') testId: string) {
    return this.service.admin.findOneTest(testId);
  }

  @Mutation(() => Test, { nullable: true })
  adminUpdateTest(
    @Args('testId') testId: string,
    @Args('input') input: TestAdminUpdateInput
  ) {
    return this.service.admin.updateTest(testId, input);
  }
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  20`] = `
"import { Resolver } from '@nestjs/graphql';
import { ApiTestService } from '@proj/api-test-data-access';
import { ApiAuthGraphQLUserGuard } from '@proj/api-auth-data-access';
import { Mutation, Query, Args } from '@nestjs/graphql';
import { UseGuards } from '@nestjs/common';
import {
  TestUserCreateInput,
  TestUserFindManyInput,
  Test,
  TestPaging,
  TestUserUpdateInput,
} from '@proj/api-test-data-access';

@Resolver()
@UseGuards(ApiAuthGraphQLUserGuard)
export class ApiTestUserResolver {
  constructor(private readonly service: ApiTestService) {}

  @Mutation(() => Test, { nullable: true })
  userCreateTest(@Args('input') input: TestUserCreateInput) {
    return this.service.user.createTest(input);
  }

  @Mutation(() => Boolean, { nullable: true })
  userDeleteTest(@Args('testId') testId: string) {
    return this.service.user.deleteTest(testId);
  }

  @Query(() => TestPaging)
  userFindManyTest(@Args('input') input: TestUserFindManyInput) {
    return this.service.user.findManyTest(input);
  }

  @Query(() => Test, { nullable: true })
  userFindOneTest(@Args('testId') testId: string) {
    return this.service.user.findOneTest(testId);
  }

  @Mutation(() => Test, { nullable: true })
  userUpdateTest(
    @Args('testId') testId: string,
    @Args('input') input: TestUserUpdateInput
  ) {
    return this.service.user.updateTest(testId, input);
  }
}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  21`] = `
"import { Module } from '@nestjs/common';
import { ApiTestDataAccessModule } from '@proj/api-test-data-access';
import { ApiTestResolver } from './api-test.resolver';
import { ApiTestAdminResolver } from './api-test-admin.resolver';
import { ApiTestUserResolver } from './api-test-user.resolver';

@Module({
  imports: [ApiTestDataAccessModule],
  providers: [ApiTestResolver, ApiTestAdminResolver, ApiTestUserResolver],
})
export class ApiTestFeatureModule {}
"
`;

exports[`api-feature generator should generate the feature libraries with crud for admin and user  22`] = `
"import { Resolver } from '@nestjs/graphql';
import { ApiTestService } from '@proj/api-test-data-access';
import { Test } from '@proj/api-test-data-access';

@Resolver(() => Test)
export class ApiTestResolver {
  constructor(private readonly service: ApiTestService) {}
}
"
`;

exports[`api-feature generator should generate the minimal feature libraries 3`] = `
"export * from './lib/api-test.data-access.module';
export * from './lib/api-test.service';
"
`;

exports[`api-feature generator should generate the minimal feature libraries 4`] = `
"import { Module } from '@nestjs/common';
import { ApiCoreDataAccessModule } from '@proj/api-core-data-access';
import { ApiTestService } from './api-test.service';

@Module({
  imports: [ApiCoreDataAccessModule],
  providers: [ApiTestService],
  exports: [ApiTestService],
})
export class ApiTestDataAccessModule {}
"
`;

exports[`api-feature generator should generate the minimal feature libraries 5`] = `
"import { Injectable } from '@nestjs/common';

@Injectable()
export class ApiTestService {
  constructor() {}
}
"
`;

exports[`api-feature generator should generate the minimal feature libraries 6`] = `
"export * from './lib/api-test.feature.module';
"
`;

exports[`api-feature generator should generate the minimal feature libraries 7`] = `
"import { Module } from '@nestjs/common';
import { ApiTestDataAccessModule } from '@proj/api-test-data-access';
import { ApiTestResolver } from './api-test.resolver';

@Module({
  imports: [ApiTestDataAccessModule],
  providers: [ApiTestResolver],
})
export class ApiTestFeatureModule {}
"
`;

exports[`api-feature generator should generate the minimal feature libraries 8`] = `
"import { Resolver } from '@nestjs/graphql';
import { ApiTestService } from '@proj/api-test-data-access';
import { Test } from '@proj/api-test-data-access';

@Resolver(() => Test)
export class ApiTestResolver {
  constructor(private readonly service: ApiTestService) {}
}
"
`;
