import { Field, ObjectType } from '@nestjs/graphql'
import { PagingResponse } from '@<%= npmScope %>/<%= app.fileName %>-core-data-access'
<% if(parent){ %> import { <%= parent.className %> } from '@<%= npmScope %>/<%= app.fileName %>-<%= parent.fileName %>-data-access' <% } %>
<% if(owner){ %> import { <%= owner.className %> } from '@<%= npmScope %>/<%= app.fileName %>-<%= owner.fileName %>-data-access' <% } %>

@ObjectType()
export class <%= model.className %> {
  @Field()
  id!: string
  @Field({ nullable: true })
  createdAt?: Date
  @Field({ nullable: true })
  updatedAt?: Date
  <% for (let field of fields){ %>
    @Field(<% if(field.optional){ %>{ nullable: true }<% } %>)
    <%= field.name %><% if(field.optional){ %>?<% } else { %>!<% } %>: <%= field.type %>
  <% } %>
<% if(parent){ %>
  @Field()
  <%= parentId %>!: string
  @Field(() => <%= parent.className %>, { nullable: true })
  <%= parentPropertyId %>?: <%= parent.className %>
<% } %>
<% if(owner){ %>
  @Field()
  <%= ownerId %>!: string
  @Field(() => <%= owner.className %>, { nullable: true })
  <%= ownerPropertyId %>?: <%= owner.className %>
<% } %>
}

@ObjectType()
export class <%= model.className %>Paging extends PagingResponse<<%= model.className %>>(<%= model.className %>) {}
