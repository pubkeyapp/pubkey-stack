import { Resolver } from '@nestjs/graphql'
import { <%= app.className %><%= model.className %>Service } from '@<%= npmScope %>/<%= app.fileName %>-<%= model.fileName %>-data-access'
import { <%= app.className %>AuthGraphQL<%= actor.className %>Guard<% if(ownerId && actor.className !== 'Admin'){ %>, CtxUserId<% } %> } from '@<%= npmScope %>/<%= app.fileName %>-auth-data-access'
import { Mutation, Query, Args } from '@nestjs/graphql'
import { UseGuards } from '@nestjs/common'
import {
  <%= model.className %><%= actor.className %>CreateInput,
  <%= model.className %><%= actor.className %>FindManyInput,
  <%= model.className %>,
  <%= model.className %>Paging,
  <%= model.className %><%= actor.className %>UpdateInput,
} from '@<%= npmScope %>/<%= app.fileName %>-<%= model.fileName %>-data-access'

@Resolver()
@UseGuards(<%= app.className %>AuthGraphQL<%= actor.className %>Guard)
export class <%= app.className %><%= model.className %><%= actor.className %>Resolver {
  constructor(private readonly service: <%= app.className %><%= model.className %>Service) {}

  @Mutation(() => <%= model.className %>, { nullable: true })
  <%= actor.propertyName %>Create<%= model.className %>(
    <% if(ownerId && actor.className !== 'Admin'){ %>@CtxUserId() <%= ownerId %>: string,<% } %>
    @Args('input') input: <%= model.className %><%= actor.className %>CreateInput) {
    return this.service.<%= actor.propertyName %>.create<%= model.className %>(<% if(ownerId && actor.className !== 'Admin'){ %><%= ownerId %>, <% } %>input)
  }

  @Mutation(() => Boolean, { nullable: true })
  <%= actor.propertyName %>Delete<%= model.className %>(
    <% if(ownerId && actor.className !== 'Admin'){ %>@CtxUserId() <%= ownerId %>: string,<% } %>
    @Args('<%= model.propertyName %>Id') <%= model.propertyName %>Id: string) {
    return this.service.<%= actor.propertyName %>.delete<%= model.className %>(<% if(ownerId && actor.className !== 'Admin'){ %><%= ownerId %>, <% } %><%= model.propertyName %>Id)
  }

  @Query(() => <%= model.className %>Paging)
  <%= actor.propertyName %>FindMany<%= model.className %>(
    <% if(ownerId && actor.className !== 'Admin'){ %>@CtxUserId() <%= ownerId %>: string,<% } %>
    @Args('input') input: <%= model.className %><%= actor.className %>FindManyInput) {
    return this.service.<%= actor.propertyName %>.findMany<%= model.className %>(<% if(ownerId && actor.className !== 'Admin'){ %><%= ownerId %>, <% } %>input)
  }

  @Query(() => <%= model.className %>, { nullable: true })
  <%= actor.propertyName %>FindOne<%= model.className %>(
    <% if(ownerId && actor.className !== 'Admin'){ %>@CtxUserId() <%= ownerId %>: string,<% } %>
    @Args('<%= model.propertyName %>Id') <%= model.propertyName %>Id: string) {
    return this.service.<%= actor.propertyName %>.findOne<%= model.className %>(<% if(ownerId && actor.className !== 'Admin'){ %><%= ownerId %>, <% } %><%= model.propertyName %>Id)
  }

  @Mutation(() => <%= model.className %>, { nullable: true })
  <%= actor.propertyName %>Update<%= model.className %>(
    <% if(ownerId && actor.className !== 'Admin'){ %>@CtxUserId() <%= ownerId %>: string,<% } %>
    @Args('<%= model.propertyName %>Id') <%= model.propertyName %>Id: string, @Args('input') input: <%= model.className %><%= actor.className %>UpdateInput) {
    return this.service.<%= actor.propertyName %>.update<%= model.className %>(<% if(ownerId && actor.className !== 'Admin'){ %><%= ownerId %>, <% } %><%= model.propertyName %>Id, input)
  }
}
