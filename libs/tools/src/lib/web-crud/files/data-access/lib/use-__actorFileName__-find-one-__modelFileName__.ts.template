import { <%= model.className %><%= actor.className %>UpdateInput } from '@<%= npmScope %>/sdk'
import { useSdk } from '@<%= npmScope %>/<%= app.fileName %>-core-data-access'
import { toastError, toastSuccess } from '@pubkey-ui/core'
import { useQuery } from '@tanstack/react-query'

export function use<%= actor.className %>FindOne<%= model.className %>({ <%= model.propertyName %>Id }:{ <%= model.propertyName %>Id: string }) {
  const sdk = useSdk()
  const query = useQuery({
    queryKey: ['<%= actor.propertyName %>', 'find-one-<%= model.fileName %>', <%= model.propertyName %>Id],
    queryFn: () => sdk.<%= actor.propertyName %>FindOne<%= model.className %>({ <%= model.propertyName %>Id }).then((res) => res.data),
    retry: 0
  })
  const item = query.data?.item ?? undefined

  return {
    item,
    query,
    update<%= model.className %>: async (input: <%= model.className %><%= actor.className %>UpdateInput) =>
      sdk
        .<%= actor.propertyName %>Update<%= model.className %>({ <%= model.propertyName %>Id, input })
        .then((res) => res.data)
        .then(async (res) => {
          if (res) {
            toastSuccess('<%= model.className %> updated')
            await query.refetch()
            return true
          }
          toastError('<%= model.className %> not updated')
          return false
        })
        .catch((err) => {
          toastError(err.message)
          return false
        }),
  }
}
